#!/bin/sh
:; #-*- mode: nendo; syntax: scheme -*-;;
:; exec /usr/local/bin/nendo $0 $*


(load "./lib/convert-jisyo.nnd")
(load "./lib/jisyo-db.nnd")

(define (convert-skk-jisyo filename)
  (let1 lines (with-open
               filename
               (lambda (f)
                 (convert-skk-jisyo-f f)))
    (for-each print lines)))


(define (load-sekka-jisyo sekka-file target)
  (with-open
   sekka-file
   (lambda (f)
     (when (not (rxmatch #/.tch$/ target))
       (set-kvs-type 'memcache))
     (load-sekka-jisyo-f f target))))


(define (dump-sekka-jisyo sekka-file)
  (let1 f STDOUT
    (dump-sekka-jisyo-f f (+ sekka-file ".tch"))))


(define (display-help)
  (print "Usage : ")
  (print "  sekka-jisyo convert SKK-JISYO.L                        ... output SEKKA-JISYO to STDOUT")
  (print "  sekka-jisyo load    SEKKA-JISYO.L  SEKKA-JISYO.L.tch   ... load   SEKKA-JISYO to DB(*.tch)")
  (print "  sekka-jisyo load    SEKKA-JISYO.L  localhost:21201     ... load   SEKKA-JISYO to memcachedb server")
  (print "  sekka-jisyo dump    SEKKA-JISYO.L                      ... dump   DB(*.tch) to SEKKA-JISYO(STDOUT)"))


(define (main argv)
  (cond
   ((= 0 (length argv))
    (display-help))
   (else
    (let1 command (string->symbol (first argv))
      (cond
       ((eq? 'convert command)
        (if (< (length argv) 2)
            (display-help)
            (convert-skk-jisyo (second argv))))
       ((eq? 'load command)
        (if (< (length argv) 3)
            (display-help)
            (load-sekka-jisyo (second argv) (third argv))))
       ((eq? 'dump command)
        (if (< (length argv) 2)
            (display-help)
            (dump-sekka-jisyo (second argv))))
       (else
        (errorf "Error: no such command [%s] \n" command )))))))



       

    
    
      
  




	