#!/bin/sh
:; #-*- mode: nendo; syntax: scheme -*-;;
:; exec /usr/local/bin/nendo $0 $*

(require "kyotocabinet")
(load "./lib/henkan.nnd")


;; result ( search-range '(search result...) )
(define (disp-search-result result)
  (printf "----------\n"
  (for-each
   (lambda (x)
     (let1 vec (x.to_arr)
       (printf " JaroW(%1.5f) [%s]:[%s]\n"
               (vector-ref vec 0)
               (vector-ref vec 1)
               (vector-ref vec 2))))
   result)))


(define (sekka-read-henkan-loop db-filename)
  (define (readline)
    (printf "> ")
    (STDIN.readline.chomp))
  (define (opendb db-filename)
    (let* ((db (KyotoCabinet::DB.new)))
      (cond
       ((db.open db-filename)
        (db.tune_encoding   "utf-8")
        db)
       (elsen
        (printf "db error [%s]\n" db.error)
        (exit 1)))))
    
  (let1 db (opendb db-filename)
    (printf " 'q': quit.\n")
    (let loop ((line (readline)))
      (if (rxmatch #/^[qQ]$/ line)
          (printf "quit.\n")
          (begin
            (write (sekkaHenkan db line))
            (newline)
            (loop (readline)))))
    (db.close)))



(define (display-help)
  (print "Usage : ")
  (print "  sekka-engine [SEKKA-JISYO.L]  ... > input and henkan loop."))


(define (main argv)
  (define cabinet-ext ".tch")
  (cond
   ((eq? 0 (length argv))
    (display-help))
   (else
    (sekka-read-henkan-loop (+ (first argv) cabinet-ext)))))
