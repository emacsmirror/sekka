;;-*- mode: nendo; syntax: scheme -*-;;
;;-* encode : utf-8 -*-
;; test for sekka jisyo library

(use nendo.test)
(require "./lib/kvs")
(load "./lib/jisyo-db.nnd")
(load "./lib/convert-jisyo.nnd")
(load "./lib/henkan.nnd")

(define dbtype (string->symbol (first *argv*)))

(test-start "henkan engine")
;;===================================================================

;;-------------------------------------------------------------------
(define target   nil)
(cond
 ((eq? dbtype 'kyotocabinet)
  (set! target "./test.kct"))
 ((eq? dbtype 'memcache)
  (set! target "localhost:11211"))
 (else
  (errorf "Unsupported db type [%s]" (symbol->string dbtype))))


;;-------------------------------------------------------------------
(test-section "Create jisyo for test suite")

(let ((_input (StringIO.new
               (string-join
                '(
                  "わたしh /私/"
                  "おこなu /行/行な;※送り位置補正/"
                  "へんかん /変換/返還/"
                  "へんか /変化/返歌/"
                  "へんかs /変化/"
                  "しぜんげんご /自然言語/"
                  "しぜんげんごしょり /自然言語処理/"
                  "しぜんげんごりかい /自然言語理解/"
                  "developer /デベロッパー/ディベロッパー/デベロッパ/"
                  ">あん /案/"
                  "{ /｛/"
                  "かっこ /確固/括弧/各個/各戸/確乎/羯鼓;雅楽の打楽器/格好/『/』;二重鉤括弧/【/】;隅付き括弧/［/］;大括弧(bracket)/〔/〕;亀甲括弧/〈/〉;山括弧/《/》;二重山括弧/｛/｝;中括弧(brace)/「/」;鉤括弧/（/）;小括弧,丸括弧(parenthesis)/‘/’;singlequote/“/”;doublequote/『』/【】/［］/〔〕/〈〉/《》/｛｝/「」/（）/‘’/“”/"
                  "こっか /国家;state/国歌;anthem.「-斉唱」/国花/骨化/國家;「国」旧字/黒化/刻下/】/）/］/』/"
                  "! /！/感嘆符/"
                  ". /．/・/。/…;.../"
                  "* /＊/※/×/"
                  "? /？/"
                  "/ /／/÷/"
                  "!= /≠/"
                  "こーひー /コーヒー/"
                  "かに /蟹/可児/蠏/"
                  "かんい /簡易/官位/冠位;-十二階/漢医;漢方医/敢為/官医/寛衣/換位/簡意/"
                  "いっち /一致/"
                  "いっち /イッチ/"
                  "えr /得/獲;NB:「とr」と同形/選;NB:「よr」「すぐr」と同形/"
                  "を /小/緒/雄/男/牡/尾/悪/汚/惡;「悪」の旧字(人名用漢字)/"
                  )
                "\n")))
      (sekka-jisyo-data
       '("watashiH Cわたしh" "watasiH Cわたしh" "わたしh /私" "okonaU Cおこなu" "oconaU Cおこなu" "おこなu /行/行な;※送り位置補正" "hennkann Cへんかん" "hennkan Cへんかん" "henncann Cへんかん" "henncan Cへんかん" "henkann Cへんかん" "henkan Cへんかん" "hencann Cへんかん" "hencan Cへんかん" "へんかん /変換/返還" "hennka Cへんか" "hennca Cへんか" "henka Cへんか" "henca Cへんか" "へんか /変化/返歌" "hennkaS Cへんかs" "henncaS Cへんかs" "henkaS Cへんかs" "hencaS Cへんかs" "へんかs /変化" "shizenngenngo Cしぜんげんご" "shizenngengo Cしぜんげんご" "shizengenngo Cしぜんげんご" "shizengengo Cしぜんげんご" "sizenngenngo Cしぜんげんご" "sizenngengo Cしぜんげんご" "sizengenngo Cしぜんげんご" "sizengengo Cしぜんげんご" "しぜんげんご /自然言語" "shizenngenngoshori Cしぜんげんごしょり" "shizenngenngosyori Cしぜんげんごしょり" "shizenngengoshori Cしぜんげんごしょり" "shizenngengosyori Cしぜんげんごしょり" "shizengenngoshori Cしぜんげんごしょり" "shizengenngosyori Cしぜんげんごしょり" "shizengengoshori Cしぜんげんごしょり" "shizengengosyori Cしぜんげんごしょり" "sizenngenngoshori Cしぜんげんごしょり" "sizenngenngosyori Cしぜんげんごしょり" "sizenngengoshori Cしぜんげんごしょり" "sizenngengosyori Cしぜんげんごしょり" "sizengenngoshori Cしぜんげんごしょり" "sizengenngosyori Cしぜんげんごしょり" "sizengengoshori Cしぜんげんごしょり" "sizengengosyori Cしぜんげんごしょり" "しぜんげんごしょり /自然言語処理" "shizenngenngorikai Cしぜんげんごりかい" "shizenngenngoricai Cしぜんげんごりかい" "shizenngengorikai Cしぜんげんごりかい" "shizenngengoricai Cしぜんげんごりかい" "shizengenngorikai Cしぜんげんごりかい" "shizengenngoricai Cしぜんげんごりかい" "shizengengorikai Cしぜんげんごりかい" "shizengengoricai Cしぜんげんごりかい" "sizenngenngorikai Cしぜんげんごりかい" "sizenngenngoricai Cしぜんげんごりかい" "sizenngengorikai Cしぜんげんごりかい" "sizenngengoricai Cしぜんげんごりかい" "sizengenngorikai Cしぜんげんごりかい" "sizengenngoricai Cしぜんげんごりかい" "sizengengorikai Cしぜんげんごりかい" "sizengengoricai Cしぜんげんごりかい" "しぜんげんごりかい /自然言語理解" "developer /デベロッパー/ディベロッパー/デベロッパ" ">ann C>あん" ">an C>あん" ">あん /案" "{ /｛" "kakko Cかっこ" "cakko Cかっこ" "かっこ /確固/括弧/各個/各戸/確乎/羯鼓;雅楽の打楽器/格好/『/』;二重鉤括弧/【/】;隅付き括弧/［/］;大括弧(bracket)/〔/〕;亀甲括弧/〈/〉;山括弧/《/》;二重山括弧/｛/｝;中括弧(brace)/「/」;鉤括弧/（/）;小括弧,丸括弧(parenthesis)/‘/’;singlequote/“/”;doublequote/『』/【】/［］/〔〕/〈〉/《》/｛｝/「」/（）/‘’/“”" "kokka Cこっか" "cokka Cこっか" "こっか /国家;state/国歌;anthem.「-斉唱」/国花/骨化/國家;「国」旧字/黒化/刻下/】/）/］/』" "! /！/感嘆符" ". /．/・/。/…;..." "* /＊/※/×" "? /？" "/ /／/÷" "!= /≠" "ko-hi- Cこーひー" "ko-hi^ Cこーひー" "ko^hi- Cこーひー" "ko^hi^ Cこーひー" "co-hi- Cこーひー" "co-hi^ Cこーひー" "co^hi- Cこーひー" "co^hi^ Cこーひー" "こーひー /コーヒー" "kani Cかに" "cani Cかに" "かに /蟹/可児/蠏" "kanni Cかんい" "kani Cかんい" "canni Cかんい" "cani Cかんい" "かんい /簡易/官位/冠位;-十二階/漢医;漢方医/敢為/官医/寛衣/換位/簡意" "icchi Cいっち" "ittyi Cいっち" "いっち /一致" "icchi Cいっち" "ittyi Cいっち" "いっち /イッチ" "eR Cえr" "えr /得/獲;NB:「とr」と同形/選;NB:「よr」「すぐr」と同形" "wo Cを" "を /小/緒/雄/男/牡/尾/悪/汚/惡;「悪」の旧字(人名用漢字)")
       ))
       
  (test* "Create test jisyo"
         sekka-jisyo-data          
         (convert-skk-jisyo-f _input))

  (test* "default KVS type" 'kyotocabinet (get-kvs-type))

  (set-kvs-type dbtype)
  (test* "changed KVS type" dbtype (get-kvs-type))
  
  (let1 sio (StringIO.new (string-join sekka-jisyo-data "\n"))
    (sio.set_encoding "utf-8")
    (load-sekka-jisyo-f sio target)))


;;-------------------------------------------------------------------
(when (eq? dbtype 'kyotocabinet)
  (require "digest/sha1")
  (test-section "dump db")
  (let1 _output (StringIO.new)
    (_output.set_encoding "utf-8")
    (test* "dump DB to SEKKA jisyo file. (1)"
           "c2578c97075fceeb93b61ec87d9949c27bb7665b"
           (begin
             (dump-sekka-jisyo-f _output target)
             (Digest::SHA1.hexdigest (_output.string))
             ;;(_output.string)
             ))))



(test-section "Open the test-suite DB")
(define a-search (ApproximateSearch.new 0.94))
(define kvs      (Kvs.new dbtype))
(cond
 ((eq? dbtype 'kyotocabinet)
  (kvs.open target)
  (require "kyotocabinet"))
 ((eq? dbtype 'memcache)
  (kvs.open target)
  (require "memcache"))
 (else
  (errorf "Unsupported db type [%s]" (symbol->string dbtype))))

(define db (kvs._db))

 ;;-------------------------------------------------------------------
(test-section "simple db fetch")
(test* "db fetch 1"
       "Cへんかん"
       (hash-table-get db "henkan" #f))

(test* "db fetch 2"
       "Cかに/かんい"
       (hash-table-get db "kani" #f))

(test* "db fetch 3"
       "Cかんい"
       (hash-table-get db "kanni" #f))

(test* "db fetch 4"
       #f
       (hash-table-get db "aaaa" #f))

;;-------------------------------------------------------------------
(test-section "approximate-search core")

(define (arr->list arr)
  (map
   (lambda (element)
     (element.to_list))
   (arr.to_list)))

(define (my-round value)
  (define significant-digits 10000.0)
  (let1 intval (. (* value significant-digits) round)
    (/ intval significant-digits)))

(define (my-round-map lst)
  (map
   (lambda (x)
     (cons (my-round (car x)) (cdr x)))
   lst))

(test* "search keyword list 1"
       '((1.0 "henkan") (0.9714 "henkann") (0.9667 "henka") (0.9611 "hennka"))
       (my-round-map
        (arr->list
         (a-search.search kvs "henkan" #f))))

(test* "search keyword list 2"
       '((1.0 "hennkan") (0.975 "hennkann") (0.9714 "hennka") (0.9667 "henkann") (0.9429 "henncan"))
       (my-round-map
        (arr->list
         (a-search.search kvs "hennkan" #f))))

(test* "search keyword list 3"
       '((1.0 "henkann") (0.9714 "henkan") (0.9667 "hennkan") (0.9429 "henka"))
       (my-round-map
        (arr->list
         (a-search.search kvs "henkann" #f))))

(test* "search keyword list 4"
       '((1.0 "hennkann") (0.975 "hennkan") (0.95 "henncann") (0.95 "hennka"))
       (my-round-map
        (arr->list
         (a-search.search kvs "hennkann" #f))))

(test* "search keyword list 5"
       '((0.9714 "henkaS") (0.9667 "hennkaS"))
       (my-round-map
        (arr->list
         (a-search.search kvs "henkanS" #t))))

(test* "search keyword list 6"
       '((0.975 "hennkaS") (0.9417 "henkaS"))
       (my-round-map
        (arr->list
         (a-search.search kvs "hennkanS" #t))))

(test* "approximate search 1"
       '((1.0 "henka" "Cへんか") (0.9667 "henkan" "Cへんかん") (0.9611 "hennka" "Cへんか") (0.9429 "henkann" "Cへんかん"))
       (my-round-map
        (approximate-search kvs "henka" #f)))

(test* "approximate search 2"
       '((1.0 "hennka" "Cへんか") (0.9714 "hennkan" "Cへんかん") (0.9611 "henkan" "Cへんかん") (0.9611 "henka" "Cへんか") (0.95 "hennkann" "Cへんかん"))
       (my-round-map
        (approximate-search kvs "hennka" #f)))

(test* "approximate search 3"
       '((0.9667 "henka" "Cへんか"))
       (my-round-map
        (approximate-search kvs "henkaS" #f)))

(test* "approximate search 4"
       '((0.9714 "hennka" "Cへんか") (0.9429 "hennkan" "Cへんかん"))
       (my-round-map
        (approximate-search kvs "hennkaS" #f)))

(test* "approximate search 5"
       '((1.0 "kani" "Cかに") (1.0 "kani" "Cかんい") (0.9533 "kanni" "Cかんい"))
       (my-round-map
        (approximate-search kvs "kani" #f)))


;;-------------------------------------------------------------------
(test-section "henkan (okuri nashi)")

(test* "okuri nashi 1"
       '(("変換" #f "へんかん") ("返還" #f "へんかん") ("変化" #f "へんか") ("返歌" #f "へんか"))
       (henkan-okuri-nashi kvs "henkan"))

(test* "okuri nashi 2"
       '(("変化" #f "へんか") ("返歌" #f "へんか") ("変換" #f "へんかん") ("返還" #f "へんかん"))
       (henkan-okuri-nashi kvs "henka"))

(test* "okuri nashi 3"
       '(("変換" #f "へんかん") ("返還" #f "へんかん") ("変化" #f "へんか") ("返歌" #f "へんか"))
       (henkan-okuri-nashi kvs "henkann"))

(test* "okuri nashi 4"
       '(("変換" #f "へんかん") ("返還" #f "へんかん") ("変化" #f "へんか") ("返歌" #f "へんか"))
       (henkan-okuri-nashi kvs "hennkan"))

(test* "okuri nashi 5"
       '(("変換" #f "へんかん") ("返還" #f "へんかん") ("変化" #f "へんか") ("返歌" #f "へんか"))
       (henkan-okuri-nashi kvs "hennkann"))

(test* "okuri nashi 6"
       '(("自然言語" #f "しぜんげんご"))
       (henkan-okuri-nashi kvs "shizengengo"))

(test* "okuri nashi 7"
       '(("自然言語処理" #f "しぜんげんごしょり") ("自然言語" #f "しぜんげんご"))
       (henkan-okuri-nashi kvs "shizengengosyo"))

(test* "okuri nashi 8"
       '(("案" #f ">あん"))
       (henkan-okuri-nashi kvs ">an"))

(test* "okuri nashi 9"
       '(("案" #f ">あん"))
       (henkan-okuri-nashi kvs ">ann"))

(test* "okuri nashi 10"
       '(("デベロッパー" #f "developper") ("ディベロッパー" #f "developper") ("デベロッパ" #f "developper"))
       (henkan-okuri-nashi kvs "developper"))

(test* "okuri nashi 11"
       '(("蟹" #f "かに") ("可児" #f "かに") ("蠏" #f "かに") ("簡易" #f "かんい") ("官位" #f "かんい") ("冠位" "-十二階" "かんい") ("漢医" "漢方医" "かんい") ("敢為" #f "かんい") ("官医" #f "かんい") ("寛衣" #f "かんい") ("換位" #f "かんい") ("簡意" #f "かんい"))
       (henkan-okuri-nashi kvs "kani"))

(test* "okuri nashi 12"
       '(("簡易" #f "かんい") ("官位" #f "かんい") ("冠位" "-十二階" "かんい") ("漢医" "漢方医" "かんい") ("敢為" #f "かんい") ("官医" #f "かんい") ("寛衣" #f "かんい") ("換位" #f "かんい") ("簡意" #f "かんい") ("蟹" #f "かに") ("可児" #f "かに") ("蠏" #f "かに"))
       (henkan-okuri-nashi kvs "kanni"))


;;-------------------------------------------------------------------
(test-section "henkan (okuri ari)")

(test* "approximate search 1"
       '((1.0 "henkaS" "Cへんかs") (0.9667 "hennkaS" "Cへんかs"))
       (my-round-map
        (approximate-search kvs "henkaS" #t)))

(test* "approximate search 2"
       '((0.9714 "henkaS" "Cへんかs") (0.9667 "hennkaS" "Cへんかs"))
       (my-round-map
        (approximate-search kvs "henkanS" #t)))

(test* "approximate search 3"
       '((1.0 "okonaU" "Cおこなu"))
       (my-round-map
        (approximate-search kvs "okonaU" #t)))

(test* "approximate search 4"
       '((0.9667 "okonaU" "Cおこなu"))
       (my-round-map
        (approximate-search kvs "okonU" #t)))

(test* "approximate search 5"
       '((1.0 "eR" "Cえr"))
       (my-round-map
        (approximate-search kvs "eR" #t)))

(test* "okuri ari 1"
       '(("私は" #f "わたしh"))
       (henkan-okuri-ari kvs "watashiHa"))

(test* "okuri ari 2"
       '(("変化する" #f "へんかs"))
       (henkan-okuri-ari kvs "henkaSuru"))

(test* "okuri ari 3"
       '(("変化する" #f "へんかs"))
       (henkan-okuri-ari kvs "HenkaSuru"))

(test* "okuri ari 4"
       '(("変化する" #f "へんかs"))
       (henkan-okuri-ari kvs "HenkaSURU"))

(test* "okuri ari 5"
       '(("変化する" #f "へんかs"))
       (henkan-okuri-ari kvs "HenkaSuRu"))

(test* "okuri ari 6"
       '(("行う" #f "おこなu") ("行なう" "※送り位置補正" "おこなu"))
       (henkan-okuri-ari kvs "okonaU"))

(test* "okuri ari 7"
       '(("行う" #f "おこなu") ("行なう" "※送り位置補正" "おこなu"))
       (henkan-okuri-ari kvs "OkonaU"))

(test* "okuri ari 8"
       '(("行う" #f "おこなu") ("行なう" "※送り位置補正" "おこなu"))
       (henkan-okuri-ari kvs "okonU"))


;;-------------------------------------------------------------------
(test-section "henkan hiragana")

(test* "hiragana 1"
       '(("あいうえお" #f "aiueo") ("アイウエオ" #f "aiueo"))
       (henkan-hiragana kvs "aiueo"))

(test* "hiragana 2"
       '(("の" #f "no") ("ノ" #f "no"))
       (henkan-hiragana kvs "no"))

(test* "hiragana 3"
       '(("b" #f "b"))
       (henkan-hiragana kvs "b"))

(test* "hiragana 4"
       '(("if" #f "if"))
       (henkan-hiragana kvs "if"))

;;-------------------------------------------------------------------
(test-section "henkan non-kanji")

(test* "non-kanji 1"
       '(("｛" #f "{"))
       (henkan-non-kanji kvs "{"))

(test* "non-kanji 2"
       '(("！" #f "!") ("感嘆符" #f "!"))
       (henkan-non-kanji kvs "!"))

(test* "non-kanji 3"
       '(("／" #f "/") ("÷" #f "/"))
       (henkan-non-kanji kvs "/"))

(test* "non-kanji 4"
       '(("≠" #f "!="))
       (henkan-non-kanji kvs "!="))

(test* "non-kanji 5"
       '(("．" #f ".") ("・" #f ".") ("。" #f ".") ("…" "..." "."))
       (henkan-non-kanji kvs "."))


;;-------------------------------------------------------------------
(test-section "sekka henkan toplevel")

(test* "henkan toplevel 1"
       '(("＊" #f "*") ("※" #f "*") ("×" #f "*"))
       (sekka-henkan kvs "*"))

(test* "henkan toplevel 2"
       '(("しぜんげんごりか" #f "shizengengorika") ("シゼンゲンゴリカ" #f "shizengengorika") ("自然言語理解" #f "しぜんげんごりかい") ("自然言語" #f "しぜんげんご"))
       (sekka-henkan kvs "shizengengorika"))

(test* "henkan toplevel 3"
       '(("自然言語理解" #f "しぜんげんごりかい") ("自然言語" #f "しぜんげんご"))
       (sekka-henkan kvs "Shizengengorika"))

(test* "henkan toplevel 4"
       '(("変化する" #f "へんかs"))
       (sekka-henkan kvs "henkaSuru"))

(test* "henkan toplevel 5"
       '(("変換" #f "へんかん") ("返還" #f "へんかん") ("変化" #f "へんか") ("返歌" #f "へんか"))
       (sekka-henkan kvs "Henkan"))

(test* "henkan toplevel 6"
       '()
       (sekka-henkan kvs "HEnkan"))

(test* "henkan toplevel 7"
       '()
       (sekka-henkan kvs "HENkan"))

(test* "henkan toplevel 8"
       '(("コーヒー" #f "こーひー"))
       (sekka-henkan kvs "Ko-hi-"))

(test* "henkan toplevel 9"
       '(("得る" #f "えr") ("獲る" "NB:「とr」と同形" "えr") ("選る" "NB:「よr」「すぐr」と同形" "えr"))
       (sekka-henkan kvs "eRu"))

(test* "henkan toplevel 10"
       '(("得る" #f "えr") ("獲る" "NB:「とr」と同形" "えr") ("選る" "NB:「よr」「すぐr」と同形" "えr"))
       (sekka-henkan kvs "ERu"))

(test* "henkan toplevel 11"
       '(("を" #f "wo") ("ヲ" #f "wo") ("小" #f "を") ("緒" #f "を") ("雄" #f "を") ("男" #f "を") ("牡" #f "を") ("尾" #f "を") ("悪" #f "を") ("汚" #f "を") ("惡" "「悪」の旧字(人名用漢字)" "を"))
       (sekka-henkan kvs "wo"))

(test* "henkan toplevel 12"
       '()
       (sekka-henkan kvs "S"))

(test* "henkan toplevel 12"
       '()
       (sekka-henkan kvs "H"))

(test* "henkan toplevel 13"
       '()
       (sekka-henkan kvs "gitHuB"))

(test* "henkan toplevel 14"
       '()
       (sekka-henkan kvs "ChangeLog"))

(test* "henkan toplevel(for Elisp) 1"
       '(("＊" nil "*") ("※" nil "*") ("×" nil "*"))
       (sekkaHenkan kvs "*"))

(test* "henkan toplevel(for Elisp) 2"
       '(("しぜんげんごりか" nil "shizengengorika") ("シゼンゲンゴリカ" nil "shizengengorika") ("自然言語理解" nil "しぜんげんごりかい") ("自然言語" nil "しぜんげんご"))
       (sekkaHenkan kvs "shizengengorika"))

(test* "henkan toplevel(for Elisp) 3"
       '(("自然言語理解" nil "しぜんげんごりかい") ("自然言語" nil "しぜんげんご"))
       (sekkaHenkan kvs "Shizengengorika"))

(test* "henkan toplevel(for Elisp) 4"
       '(("変化する" nil "へんかs"))
       (sekkaHenkan kvs "henkaSuru"))

(test* "henkan toplevel(for Elisp) 5"
       '(("変換" nil "へんかん") ("返還" nil "へんかん") ("変化" nil "へんか") ("返歌" nil "へんか"))
       (sekkaHenkan kvs "Henkan"))


;;-------------------------------------------------------------------
(test-section "henkan kakutei")
(test* "henkan kakutei(for Elisp) 1"
       '(("返還" nil "へんかん") ("変換" nil "へんかん") ("変化" nil "へんか") ("返歌" nil "へんか"))
       (begin
         (sekkaKakutei kvs "へんかん" "返還")
         (sekkaHenkan kvs "Henkan")))

(test* "henkan kakutei(for Elisp) 2"
       '(("デベロッパ" nil "developer") ("デベロッパー" nil "developer") ("ディベロッパー" nil "developer"))
       (begin
         (sekkaKakutei kvs "developer" "デベロッパ")
         (sekkaHenkan kvs "developer")))

(test* "henkan kakutei(for Elisp) 3"
       '(("。" nil ".") ("．" nil ".") ("・" nil ".") ("…" "..." "."))
       (begin
         (sekkaKakutei kvs "." "。")
         (sekkaHenkan kvs ".")))

(test* "henkan kakutei(for Elisp) 4"
       "。"
       (sekkaKakutei kvs "." "。"))

(test* "henkan kakutei(for Elisp) 5"
       nil
       (sekkaKakutei kvs "developper" "デベロッパ"))

(test* "henkan kakutei(for Elisp) 6"
       nil
       (sekkaKakutei kvs "wo" "を"))


;;===================================================================
(test-end)
