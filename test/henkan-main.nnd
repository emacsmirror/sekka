;;-*- mode: nendo; syntax: scheme -*-
;;;
;;; henkan-main.nnd - 変換エンジンのコア部分のテストスイート
;;;  
;;;   Copyright (c) 2010  Kiyoka Nishiyama  <kiyoka@sumibi.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: 
;;;
(require "sekka/kvs")
(use nendo.test)
(use sekka.convert-jisyo)
(use sekka.henkan)
(load "./test/common.nnd")

(define dbtype   (string->symbol (first *argv*)))
(define userid   "dummy")
(define userid2  "dummy2")

(test-start "henkan engine")
;;===================================================================

;;-------------------------------------------------------------------
(define target   nil)
(cond
 ((eq? dbtype 'tokyocabinet)
  (set! target "./test.tch"))
 ((eq? dbtype 'memcache)
  (set! target "localhost:11211"))
 (else
  (errorf "Unsupported db type [%s]" (symbol->string dbtype))))


;;-------------------------------------------------------------------
(test-section "Create jisyo for test suite")

(let ((_input (StringIO.new
               (string-join
                '(
                  "わたしh /私/"
                  "おこなu /行/行な;※送り位置補正/"
                  "へんかん /変換/返還/"
                  "へんか /変化/返歌/"
                  "へんかs /変化/"
                  "しぜんげんご /自然言語/"
                  "しぜんげんごしょり /自然言語処理/"
                  "しぜんげんごりかい /自然言語理解/"
                  "developer /デベロッパー/ディベロッパー/デベロッパ/"
                  ">あん /案/"
                  "{ /｛/"
                  "かっこ /確固/括弧/各個/各戸/確乎/羯鼓;雅楽の打楽器/格好/『』/【】/［］/〔〕/〈〉/《》/｛｝/「」/（）/‘’/“”/"
                  "こっか /国家;state/国歌;anthem.「-斉唱」/国花/骨化/國家;「国」旧字/黒化/刻下/】/）/］/』/"
                  "! /！/感嘆符/"
                  ". /．/・/。/…;.../"
                  "* /＊/※/×/"
                  "? /？/"
                  "/ /／/÷/"
                  "!= /≠/"
                  "こーひー /コーヒー/"
                  "かに /蟹/可児/蠏/"
                  "かんい /簡易/官位/冠位;-十二階/漢医;漢方医/敢為/官医/寛衣/換位/簡意/"
                  "いっち /一致/"
                  "いっち /イッチ/"
                  "えr /得/獲;NB:「とr」と同形/選;NB:「よr」「すぐr」と同形/"
                  "を /小/緒/雄/男/牡/尾/悪/汚/惡;「悪」の旧字(人名用漢字)/"
                  "みr /見/観;(字義:みわたす)/視;(字義:じっとみる)/診;(diagnose) 患者を診る/看;(nurse) 病母を看る/觀;「観」の旧字/"
                  "wake /ウェイク/"
                  "わけ /訳/和気;地名/理由;当て字/分け/分/譯;「訳」の旧字/戯奴/"
                  "あu /合;(一致) 話が合う/会;人と会う/遭;(偶然、特によくないことにあう) 事故に遭う/逢;(人と|運命的にあう) 巡り逢う/遇;≒遭う/會;「会」の旧字/"
                  "さく /策/柵/作/佐久;地名/朔;朔日 ⇔晦/槊;ほこ/搾;搾取/昨;昨夜/咋;(くう)/窄;狭窄/酢;酢酸/柞;いすのき/炸;炸裂/筰;山田耕筰/削;削除/索;検索/錯;錯誤/筴/縒;より/鑿/做;「作」の異体字/簀;す/嘖;さいな・む/捉;(漢音) とら・える/齪;齷齪/冊;(慣用音)竹冊/册;「冊」の旧字/辟;?/乍;?/"
                  "さき /先/崎/左記/前/早紀/沙樹/早岐/沙貴/咲/埼/尖/嵜/碕/早記/"
                  "いんにょう /飲尿/廴繞;[部首]/"
                  "いんよう /引用/飲用/陰陽/"
                  "かt /勝/買/飼/刈;(crop)草を刈る")
                "\n")))
      (sekka-jisyo-data
       '("watashiH Cわたしh" "watasiH Cわたしh" "wtshiH Cわたしh" "wtsiH Cわたしh" "わたしh /私" "okonaU Cおこなu" "おこなu /行/行な;※送り位置補正" "hdkn Cへんかん" "hdkz Cへんかん" "henkan Cへんかん" "henkann Cへんかん" "henkaq Cへんかん" "hennkan Cへんかん" "hennkann Cへんかん" "hennkaq Cへんかん" "heqkan Cへんかん" "heqkann Cへんかん" "heqkaq Cへんかん" "へんかん /変換/返還" "hdka Cへんか" "henka Cへんか" "hennka Cへんか" "heqka Cへんか" "へんか /変化/返歌" "hdkaS Cへんかs" "henkaS Cへんかs" "hennkaS Cへんかs" "heqkaS Cへんかs" "へんかs /変化" "shizdgdgo Cしぜんげんご" "shizengengo Cしぜんげんご" "shizengenngo Cしぜんげんご" "shizengeqgo Cしぜんげんご" "shizenngengo Cしぜんげんご" "shizenngenngo Cしぜんげんご" "shizenngeqgo Cしぜんげんご" "shizeqgengo Cしぜんげんご" "shizeqgenngo Cしぜんげんご" "shizeqgeqgo Cしぜんげんご" "sizdgdgo Cしぜんげんご" "sizengengo Cしぜんげんご" "sizengenngo Cしぜんげんご" "sizengeqgo Cしぜんげんご" "sizenngengo Cしぜんげんご" "sizenngenngo Cしぜんげんご" "sizenngeqgo Cしぜんげんご" "sizeqgengo Cしぜんげんご" "sizeqgenngo Cしぜんげんご" "sizeqgeqgo Cしぜんげんご" "しぜんげんご /自然言語" "shizdgdgoshori Cしぜんげんごしょり" "shizdgdgosyori Cしぜんげんごしょり" "shizdgdgoxori Cしぜんげんごしょり" "shizengengoshori Cしぜんげんごしょり" "shizengengosyori Cしぜんげんごしょり" "shizengengoxori Cしぜんげんごしょり" "shizengenngoshori Cしぜんげんごしょり" "shizengenngosyori Cしぜんげんごしょり" "shizengenngoxori Cしぜんげんごしょり" "shizengeqgoshori Cしぜんげんごしょり" "shizengeqgosyori Cしぜんげんごしょり" "shizengeqgoxori Cしぜんげんごしょり" "shizenngengoshori Cしぜんげんごしょり" "shizenngengosyori Cしぜんげんごしょり" "shizenngengoxori Cしぜんげんごしょり" "shizenngenngoshori Cしぜんげんごしょり" "shizenngenngosyori Cしぜんげんごしょり" "shizenngenngoxori Cしぜんげんごしょり" "shizenngeqgoshori Cしぜんげんごしょり" "shizenngeqgosyori Cしぜんげんごしょり" "shizenngeqgoxori Cしぜんげんごしょり" "shizeqgengoshori Cしぜんげんごしょり" "shizeqgengosyori Cしぜんげんごしょり" "shizeqgengoxori Cしぜんげんごしょり" "shizeqgenngoshori Cしぜんげんごしょり" "shizeqgenngosyori Cしぜんげんごしょり" "shizeqgenngoxori Cしぜんげんごしょり" "shizeqgeqgoshori Cしぜんげんごしょり" "shizeqgeqgosyori Cしぜんげんごしょり" "shizeqgeqgoxori Cしぜんげんごしょり" "sizdgdgoshori Cしぜんげんごしょり" "sizdgdgosyori Cしぜんげんごしょり" "sizdgdgoxori Cしぜんげんごしょり" "sizengengoshori Cしぜんげんごしょり" "sizengengosyori Cしぜんげんごしょり" "sizengengoxori Cしぜんげんごしょり" "sizengenngoshori Cしぜんげんごしょり" "sizengenngosyori Cしぜんげんごしょり" "sizengenngoxori Cしぜんげんごしょり" "sizengeqgoshori Cしぜんげんごしょり" "sizengeqgosyori Cしぜんげんごしょり" "sizengeqgoxori Cしぜんげんごしょり" "sizenngengoshori Cしぜんげんごしょり" "sizenngengosyori Cしぜんげんごしょり" "sizenngengoxori Cしぜんげんごしょり" "sizenngenngoshori Cしぜんげんごしょり" "sizenngenngosyori Cしぜんげんごしょり" "sizenngenngoxori Cしぜんげんごしょり" "sizenngeqgoshori Cしぜんげんごしょり" "sizenngeqgosyori Cしぜんげんごしょり" "sizenngeqgoxori Cしぜんげんごしょり" "sizeqgengoshori Cしぜんげんごしょり" "sizeqgengosyori Cしぜんげんごしょり" "sizeqgengoxori Cしぜんげんごしょり" "sizeqgenngoshori Cしぜんげんごしょり" "sizeqgenngosyori Cしぜんげんごしょり" "sizeqgenngoxori Cしぜんげんごしょり" "sizeqgeqgoshori Cしぜんげんごしょり" "sizeqgeqgosyori Cしぜんげんごしょり" "sizeqgeqgoxori Cしぜんげんごしょり" "しぜんげんごしょり /自然言語処理" "shizdgdgorikq Cしぜんげんごりかい" "shizengengorikai Cしぜんげんごりかい" "shizengenngorikai Cしぜんげんごりかい" "shizengeqgorikai Cしぜんげんごりかい" "shizenngengorikai Cしぜんげんごりかい" "shizenngenngorikai Cしぜんげんごりかい" "shizenngeqgorikai Cしぜんげんごりかい" "shizeqgengorikai Cしぜんげんごりかい" "shizeqgenngorikai Cしぜんげんごりかい" "shizeqgeqgorikai Cしぜんげんごりかい" "sizdgdgorikq Cしぜんげんごりかい" "sizengengorikai Cしぜんげんごりかい" "sizengenngorikai Cしぜんげんごりかい" "sizengeqgorikai Cしぜんげんごりかい" "sizenngengorikai Cしぜんげんごりかい" "sizenngenngorikai Cしぜんげんごりかい" "sizenngeqgorikai Cしぜんげんごりかい" "sizeqgengorikai Cしぜんげんごりかい" "sizeqgenngorikai Cしぜんげんごりかい" "sizeqgeqgorikai Cしぜんげんごりかい" "しぜんげんごりかい /自然言語理解" "developer /デベロッパー/ディベロッパー/デベロッパ" ">an C>あん" ">ann C>あん" ">aq C>あん" ">あん /案" "{ /｛" "ka@ko Cかっこ" "kakko Cかっこ" "かっこ /確固/括弧/各個/各戸/確乎/羯鼓;雅楽の打楽器/格好/『』/【】/［］/〔〕/〈〉/《》/｛｝/「」/（）/‘’/“”" "ko@ka Cこっか" "kokka Cこっか" "こっか /国家;state/国歌;anthem.「-斉唱」/国花/骨化/國家;「国」旧字/黒化/刻下/】/）/］/』" "! /！/感嘆符" ". /．/・/。/…;..." "* /＊/※/×" "? /？" "/ /／/÷" "!= /≠" "ko-hi- Cこーひー" "ko-hi: Cこーひー" "ko-hi^ Cこーひー" "ko:hi- Cこーひー" "ko:hi: Cこーひー" "ko:hi^ Cこーひー" "ko^hi- Cこーひー" "ko^hi: Cこーひー" "ko^hi^ Cこーひー" "こーひー /コーヒー" "kani Cかに" "かに /蟹/可児/蠏" "kani Cかんい" "kanni Cかんい" "kaqi Cかんい" "kni Cかんい" "kzi Cかんい" "かんい /簡易/官位/冠位;-十二階/漢医;漢方医/敢為/官医/寛衣/換位/簡意" "i@chi Cいっち" "i@ci Cいっち" "i@tyi Cいっち" "icchi Cいっち" "icci Cいっち" "ittyi Cいっち" "いっち /一致" "i@chi Cいっち" "i@ci Cいっち" "i@tyi Cいっち" "icchi Cいっち" "icci Cいっち" "ittyi Cいっち" "いっち /イッチ" "eR Cえr" "えr /得/獲;NB:「とr」と同形/選;NB:「よr」「すぐr」と同形" "wo Cを" "を /小/緒/雄/男/牡/尾/悪/汚/惡;「悪」の旧字(人名用漢字)" "miR Cみr" "みr /見/観;(字義:みわたす)/視;(字義:じっとみる)/診;(diagnose) 患者を診る/看;(nurse) 病母を看る/觀;「観」の旧字" "wake /ウェイク" "wake Cわけ" "わけ /訳/和気;地名/理由;当て字/分け/分/譯;「訳」の旧字/戯奴" "aU Cあu" "あu /合;(一致) 話が合う/会;人と会う/遭;(偶然、特によくないことにあう) 事故に遭う/逢;(人と|運命的にあう) 巡り逢う/遇;≒遭う/會;「会」の旧字" "saku Cさく" "さく /策/柵/作/佐久;地名/朔;朔日 ⇔晦/槊;ほこ/搾;搾取/昨;昨夜/咋;(くう)/窄;狭窄/酢;酢酸/柞;いすのき/炸;炸裂/筰;山田耕筰/削;削除/索;検索/錯;錯誤/筴/縒;より/鑿/做;「作」の異体字/簀;す/嘖;さいな・む/捉;(漢音) とら・える/齪;齷齪/冊;(慣用音)竹冊/册;「冊」の旧字/辟;?/乍;?" "saki Cさき" "さき /先/崎/左記/前/早紀/沙樹/早岐/沙貴/咲/埼/尖/嵜/碕/早記" "inngou Cいんにょう" "innngou Cいんにょう" "innnyou Cいんにょう" "innyou Cいんにょう" "iqngou Cいんにょう" "iqnyou Cいんにょう" "いんにょう /飲尿/廴繞;[部首]" "innyou Cいんよう" "innyp Cいんよう" "inyou Cいんよう" "inyp Cいんよう" "iqyou Cいんよう" "iqyp Cいんよう" "いんよう /引用/飲用/陰陽" "kaT Cかt" "かt /勝/買/飼/刈;(crop)草を刈る" "ka` Cか`" "か` /勝/買/飼/刈;(crop)草を刈る")
       ))
       
  (test* "Create test jisyo"
         sekka-jisyo-data          
         (convert-skk-jisyo-f _input))

  (test* "default KVS type" 'tokyocabinet (get-kvs-type))

  (set-kvs-type dbtype)
  (test* "changed KVS type" dbtype (get-kvs-type))
  
  (let1 sio (StringIO.new (string-join sekka-jisyo-data "\n"))
    (sio.set_encoding "utf-8")
    (load-sekka-jisyo-f sio target)))


;;-------------------------------------------------------------------
(when (eq? dbtype 'tokyocabinet)
  (require "digest/sha1")
  (test-section "dump db")
  (let1 _output (StringIO.new)
    (_output.set_encoding "utf-8")
    (test* "dump DB to SEKKA jisyo file. (1)"
           "e94329e886f5f2c6df6d18d3e8ee03c41be6475f"
           (begin
             (dump-sekka-jisyo-f _output target)
             (Digest::SHA1.hexdigest (_output.string))
             ;;(_output.string)
             ))))



(test-section "Open the test-suite DB")
(define a-search (ApproximateSearch.new 0.94))
(define kvs      (Kvs.new dbtype))
(cond
 ((eq? dbtype 'tokyocabinet)
  (kvs.open target)
  (require "tokyocabinet"))
 ((eq? dbtype 'memcache)
  (kvs.open target)
  (require "memcache"))
 (else
  (errorf "Unsupported db type [%s]" (symbol->string dbtype))))

(define db (kvs._db))


;;-------------------------------------------------------------------
(test-section "Register User dict")
(for-each
 (lambda (x)
   (let ((_answer    (first x))
         (_user      (second x))
         (_dict-line (third x)))
     (test* (sprintf "register dict [%s] from queue" _dict-line)
            _answer
            (registerUserJisyo _user kvs _dict-line))))
 `(
   (#t  ,userid "まじぱねぇ /マジパネェ/")
   (#t  ,userid "ぶろぐr /ブログ/")
   (#t  ,userid "ぶろぐt /ブログ/")
   (#t  ,userid "へんかんえんじん /変換エンジン/")
   (#t  ,userid "はてぶ /はてブ/はてなブックマーク/")
   (#f  ,userid "はてぶ /はてブ/はてなブックマーク/")
   (#t  ,userid "まじぱねぇ /マジパネェ/まじパネェ/マジ半端ネェ/まじ半端ネェ/")
   (#f  ,userid "まじぱねぇ /マジパネェ/まじパネェ/マジ半端ネェ/まじ半端ネェ/")
   (#f  ,userid "まじぱねぇ /マジパネェ/まじパネェ/マジ半端ネェ/まじ半端ネェ/")
   (#t  ,userid "てすとようえんとり /エントリA/エントリB/エントリC/")
   (#f  ,userid ";; コメント")
   (#f  ,userid ";;-------- 罫線 -------")
   (#f  ,userid "") ;; 空行
   (#f  ,userid "aaaa") ;; 明らかなフォーマットエラー
   (#f  ,userid "単語 /たんご/") ;; フォーマットエラー
   ))


;;-------------------------------------------------------------------
(test-section "simple db fetch")
(test* "db fetch 1"
       "Cへんかん"
       (. (hash-table-get db "MASTER::henkan" #f) force_encoding "UTF-8"))

(test* "db fetch 2"
       "Cかに/かんい"
       (. (hash-table-get db "MASTER::kani" #f) force_encoding "UTF-8"))

(test* "db fetch 3"
       "Cかんい"
       (. (hash-table-get db "MASTER::kanni" #f) force_encoding "UTF-8"))

(test* "db fetch 4"
       #f
       (hash-table-get db "MASTER::aaaa" #f))

(test* "db fetch 5"
       "Cへんかんえんじん"
       (. (hash-table-get db "dummy::henkanenjin" #f) force_encoding "UTF-8"))

(test* "db fetch 6"
       "ka@ko kakko kani kanni kaqi"
       (. (hash-table-get db "MASTER::(ka)" #f) force_encoding "UTF-8"))

(test* "db fetch 7"
       "kaT ka`"
       (. (hash-table-get db "MASTER::(KA)" #f) force_encoding "UTF-8"))

(test* "db fetch 8"
       "buroguR buroguT burogu`"
       (. (hash-table-get db "dummy::(BU)" #f) force_encoding "UTF-8"))

(test* "db fetch 9"
       "tesutoyouenntori tesutoyouentori tesutoyoueqtori tesutoypenntori tesutoypentori tesutoypeqtori"
       (. (hash-table-get db "dummy::(te)" #f) force_encoding "UTF-8"))

(test* "db fetch 10"
       "/エントリA/エントリB/エントリC"
       (. (hash-table-get db "dummy::てすとようえんとり" #f) force_encoding "UTF-8"))



;;-------------------------------------------------------------------
(test-section "Replace user dict entry")
(test*  "replace information of user dict entry"
        #t
        (registerUserJisyo userid kvs
                           "てすとようえんとり /エントリA/エントリC/\n"))

;; FIX-ME: このテストがまだパスしない。エントリB という単語が消えないといけない。
;;(test* "db fetch 11"
;;       "/エントリA/エントリC"
;;       (. (hash-table-get db "dummy::てすとようえんとり" #f) force_encoding "UTF-8"))


;;-------------------------------------------------------------------
(test* "db fetch 10"
       "tesutoyouenntori tesutoyouentori tesutoyoueqtori tesutoypenntori tesutoypentori tesutoypeqtori"
       (. (hash-table-get db "dummy::(te)" #f) force_encoding "UTF-8"))


;;-------------------------------------------------------------------
(test-section "approximate-search core")

(test* "search keyword list 1"
       '((1.0 "henkan") (0.981 "henkann") (0.9722 "henka") (0.9611 "hennka") (0.9444 "henkaq"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "henkan" #f))))

(test* "search keyword list 2"
       '((1.0 "hennkan") (0.9875 "hennkann") (0.981 "hennka") (0.9667 "henkann") (0.9619 "hennkaq") (0.9421 "hennkanenzin") (0.9421 "hennkanenjiq") (0.9421 "hennkaneqjin") (0.9421 "hennkaneqjiq") (0.9421 "hennkaneqzin") (0.9421 "hennkaneqziq") (0.9421 "hennkanenjin") (0.9421 "hennkanenziq"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "hennkan" #f))))

(test* "search keyword list 3"
       '((1.0 "henkann") (0.981 "henkan") (0.9667 "hennkan") (0.9524 "henka") (0.9449 "henkanenzin") (0.9449 "henkanenziq") (0.9449 "henkaneqjin") (0.9449 "henkaneqzin") (0.9449 "henkanenjiq") (0.9449 "henkanenjin") (0.9421 "henkannenzin") (0.9421 "henkannenjiq") (0.9421 "henkannenziq") (0.9421 "henkanneqjin") (0.9421 "henkanneqjiq") (0.9421 "henkanneqzin") (0.9421 "henkanneqziq") (0.9421 "henkannenjin"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "henkann" #f))))

(test* "search keyword list 4"
       '((1.0 "hennkann") (0.9875 "hennkan") (0.9667 "hennka") (0.9537 "hennkanenjiq") (0.9537 "hennkanenjin") (0.9537 "hennkanenzin") (0.9537 "hennkaneqjin") (0.9537 "hennkanenziq") (0.9537 "hennkaneqzin") (0.9507 "hennkannenjiq") (0.9507 "hennkannenzin") (0.9507 "hennkannenjin") (0.9507 "hennkanneqziq") (0.9507 "hennkanneqzin") (0.9507 "hennkannenziq") (0.9507 "hennkanneqjin") (0.9507 "hennkanneqjiq") (0.9476 "hennkaq") (0.9444 "hennkaqenjin") (0.9444 "hennkaqenzin") (0.9408 "hennkanenjinn") (0.9408 "hennkaneqzinn") (0.9408 "hennkanennjin") (0.9408 "hennkaneqjinn") (0.9408 "hennkanennjiq") (0.9408 "hennkanennzin") (0.9408 "hennkanenzinn") (0.9408 "hennkanennziq"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "hennkann" #f))))

(test* "search keyword list 5"
       '((1.0 "heqkaq") (0.9722 "heqka") (0.9444 "heqkan"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "heqkaq" #f))))

(test* "search keyword list 6"
       '((0.9762 "henkaS") (0.9667 "hennkaS"))       
       (my-round-map
        (arr->list
         (a-search.search userid kvs "henkanS" #t))))

(test* "search keyword list 7"
       '((0.9833 "hennkaS") (0.9417 "henkaS"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "hennkanS" #t))))

(test* "approximate search 1"
       '((1.0 "henka" "Cへんか") (0.9722 "henkan" "Cへんかん") (0.9722 "henkaq" "Cへんかん") (0.9611 "hennka" "Cへんか") (0.9524 "henkann" "Cへんかん"))
       (my-round-map
        (approximate-search userid kvs "henka" #f 0)))

(test* "approximate search 2"
       '((1.1 "hennka" "Cへんか") (1.079 "hennkaq" "Cへんかん") (1.079 "hennkan" "Cへんかん") (1.0633 "hennkann" "Cへんかん") (0.9611 "henkan" "Cへんかん") (0.9611 "henka" "Cへんか"))
       (my-round-map
        (approximate-search userid kvs "hennka" #f 0)))

(test* "approximate search 3"
       '((0.9722 "henka" "Cへんか") (0.9444 "henkan" "Cへんかん") (0.9444 "henkaq" "Cへんかん"))
       (my-round-map
        (approximate-search userid kvs "henkaS" #f 0)))

(test* "approximate search 4"
       '((1.079 "hennka" "Cへんか") (1.0581 "hennkan" "Cへんかん") (1.0581 "hennkaq" "Cへんかん") (1.0424 "hennkann" "Cへんかん"))
       (my-round-map
        (approximate-search userid kvs "hennkaS" #f 0)))

(test* "approximate search 5"
       '((1.0 "kani" "Cかに") (1.0 "kani" "Cかんい") (0.9533 "kanni" "Cかんい"))
       (my-round-map
        (approximate-search userid kvs "kani" #f 0)))

(test* "approximate search 6"
       '((1.1 "hennka" "Cへんか"))
       (my-round-map
        (approximate-search userid kvs "hennka" #f 1)))

(test* "approximate search 7"
       '((1.1 "hennka" "Cへんか") (1.079 "hennkaq" "Cへんかん"))
       (my-round-map
        (approximate-search userid kvs "hennka" #f 2)))

(test* "approximate search 8"
       '((1.0 "saki" "Cさき"))
       (my-round-map
        (approximate-search userid kvs "saki" #f 0)))

(test* "approximate search 9"
       '((1.0 "inyou" "Cいんよう") (0.9556 "innyou" "Cいんにょう") (0.9556 "innyou" "Cいんよう"))
       (my-round-map
        (approximate-search userid kvs "inyou" #f 0)))

(test* "approximate search 10"
       '((1.1 "innyou" "Cいんよう") (1.0 "innyou" "Cいんにょう") (0.9667 "innnyou" "Cいんにょう") (0.9556 "inyou" "Cいんよう"))
       (my-round-map
        (approximate-search userid kvs "innyou" #f 0)))


;;-------------------------------------------------------------------
(test-section "henkan (okuri nashi)")

(test* "okuri nashi 1"
       '(("変換" #f "へんかん" j) ("返還" #f "へんかん" j) ("変化" #f "へんか" j) ("返歌" #f "へんか" j))
       (henkan-okuri-nashi userid kvs "henkan" 0))

(test* "okuri nashi 2"
       '(("変化" #f "へんか" j) ("返歌" #f "へんか" j) ("変換" #f "へんかん" j) ("返還" #f "へんかん" j))
       (henkan-okuri-nashi userid kvs "henka" 0))

(test* "okuri nashi 3"
       '(("変換" #f "へんかん" j) ("返還" #f "へんかん" j) ("変換エンジン" #f "へんかんえんじん" j) ("変化" #f "へんか" j) ("返歌" #f "へんか" j))
       (henkan-okuri-nashi userid kvs "henkann" 0))

(test* "okuri nashi 4"
       '(("変換" #f "へんかん" j) ("返還" #f "へんかん" j) ("変化" #f "へんか" j) ("返歌" #f "へんか" j) ("変換エンジン" #f "へんかんえんじん" j))
       (henkan-okuri-nashi userid kvs "hennkan" 0))

(test* "okuri nashi 5"
       '(("変換" #f "へんかん" j) ("返還" #f "へんかん" j) ("変換エンジン" #f "へんかんえんじん" j) ("変化" #f "へんか" j) ("返歌" #f "へんか" j))
       (henkan-okuri-nashi userid kvs "hennkann" 0))

(test* "okuri nashi 6"
       '(("自然言語" #f "しぜんげんご" j) ("自然言語処理" #f "しぜんげんごしょり" j) ("自然言語理解" #f "しぜんげんごりかい" j))
       (henkan-okuri-nashi userid kvs "shizengengo" 0))

(test* "okuri nashi 7"
       '(("自然言語処理" #f "しぜんげんごしょり" j) ("自然言語" #f "しぜんげんご" j) ("自然言語理解" #f "しぜんげんごりかい" j))
       (henkan-okuri-nashi userid kvs "shizengengosyo" 0))

(test* "okuri nashi 8"
       '(("案" #f ">あん" j))
       (henkan-okuri-nashi userid kvs ">an" 0))

(test* "okuri nashi 9"
       '(("案" #f ">あん" j))
       (henkan-okuri-nashi userid kvs ">ann" 0))

(test* "okuri nashi 10"
       '(("デベロッパー" #f "developper" j) ("ディベロッパー" #f "developper" j) ("デベロッパ" #f "developper" j))
       (henkan-okuri-nashi userid kvs "developper" 0))

(test* "okuri nashi 11"
       '(("蟹" #f "かに" j) ("可児" #f "かに" j) ("蠏" #f "かに" j) ("簡易" #f "かんい" j) ("官位" #f "かんい" j) ("冠位" "-十二階" "かんい" j) ("漢医" "漢方医" "かんい" j) ("敢為" #f "かんい" j) ("官医" #f "かんい" j) ("寛衣" #f "かんい" j) ("換位" #f "かんい" j) ("簡意" #f "かんい" j))
       (henkan-okuri-nashi userid kvs "kani" 0))

(test* "okuri nashi 12"
       '(("簡易" #f "かんい" j) ("官位" #f "かんい" j) ("冠位" "-十二階" "かんい" j) ("漢医" "漢方医" "かんい" j) ("敢為" #f "かんい" j) ("官医" #f "かんい" j) ("寛衣" #f "かんい" j) ("換位" #f "かんい" j) ("簡意" #f "かんい" j) ("蟹" #f "かに" j) ("可児" #f "かに" j) ("蠏" #f "かに" j))
       (henkan-okuri-nashi userid kvs "kanni" 0))

(test* "okuri nashi 13"
       '(("蟹" #f "かに" j))
       (henkan-okuri-nashi userid kvs "kani" 1))

(test* "okuri nashi 14"
       '(("先" #f "さき" j) ("崎" #f "さき" j) ("左記" #f "さき" j) ("前" #f "さき" j) ("早紀" #f "さき" j) ("沙樹" #f "さき" j) ("早岐" #f "さき" j) ("沙貴" #f "さき" j) ("咲" #f "さき" j) ("埼" #f "さき" j) ("尖" #f "さき" j) ("嵜" #f "さき" j) ("碕" #f "さき" j) ("早記" #f "さき" j))
       (henkan-okuri-nashi userid kvs "Saki" 0))

(test* "okuri nashi 15"
       '(("確固" #f "かっこ" j) ("括弧" #f "かっこ" j) ("各個" #f "かっこ" j) ("各戸" #f "かっこ" j) ("確乎" #f "かっこ" j) ("羯鼓" "雅楽の打楽器" "かっこ" j) ("格好" #f "かっこ" j) ("『』" #f "かっこ" j) ("【】" #f "かっこ" j) ("［］" #f "かっこ" j) ("〔〕" #f "かっこ" j) ("〈〉" #f "かっこ" j) ("《》" #f "かっこ" j) ("｛｝" #f "かっこ" j) ("「」" #f "かっこ" j) ("（）" #f "かっこ" j) ("‘’" #f "かっこ" j) ("“”" #f "かっこ" j))
       (henkan-okuri-nashi userid kvs "Kakko" 0))

(test* "okuri nashi 16"
       '(("確固" #f "かっこ" j) ("括弧" #f "かっこ" j) ("各個" #f "かっこ" j) ("各戸" #f "かっこ" j) ("確乎" #f "かっこ" j) ("羯鼓" "雅楽の打楽器" "かっこ" j) ("格好" #f "かっこ" j) ("『』" #f "かっこ" j) ("【】" #f "かっこ" j) ("［］" #f "かっこ" j) ("〔〕" #f "かっこ" j) ("〈〉" #f "かっこ" j) ("《》" #f "かっこ" j) ("｛｝" #f "かっこ" j) ("「」" #f "かっこ" j) ("（）" #f "かっこ" j) ("‘’" #f "かっこ" j) ("“”" #f "かっこ" j))
       (henkan-okuri-nashi userid kvs "Ka@ko" 0))

(test* "okuri nashi 17"
       '(("一致" #f "いっち" j) ("イッチ" #f "いっち" j))
       (henkan-okuri-nashi userid kvs "icchi" 0))

(test* "okuri nashi 18"
       '(("一致" #f "いっち" j) ("イッチ" #f "いっち" j))
       (henkan-okuri-nashi userid kvs "i@chi" 0))


;;-------------------------------------------------------------------
(test-section "henkan (okuri ari)")

(test* "approximate search 1"
       '((1.0 "henkaS" "Cへんかs") (0.9667 "hennkaS" "Cへんかs"))
       (my-round-map
        (approximate-search userid kvs "henkaS" #t 0)))

(test* "approximate search 2"
       '((0.9762 "henkaS" "Cへんかs") (0.9667 "hennkaS" "Cへんかs"))
       (my-round-map
        (approximate-search userid kvs "henkanS" #t 0)))

(test* "approximate search 3"
       '((1.0 "okonaU" "Cおこなu"))
       (my-round-map
        (approximate-search userid kvs "okonaU" #t 0)))

(test* "approximate search 4"
       '((0.9667 "okonaU" "Cおこなu"))
       (my-round-map
        (approximate-search userid kvs "okonU" #t 0)))

(test* "approximate search 5"
       '((1.0 "eR" "Cえr"))
       (my-round-map
        (approximate-search userid kvs "eR" #t 0)))

(test* "approximate search 6"
       '((1.0 "henkaS" "Cへんかs"))
       (my-round-map
        (approximate-search userid kvs "henkaS" #t 1)))

(test* "approximate search 7"
       '((1.0 "henkaS" "Cへんかs") (0.9667 "hennkaS" "Cへんかs"))
       (my-round-map
        (approximate-search userid kvs "henkaS" #t 2)))


(test* "okuri ari 1"
       '(("私は" #f "わたしh" j))
       (henkan-okuri-ari userid kvs "watashiHa" 0 :normal))

(test* "okuri ari 2"
       '(("変化する" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSuru" 0 :normal))

(test* "okuri ari 3"
       '(("変化する" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "HenkaSuru" 0 :normal))

(test* "okuri ari 4"
       '(("変化する" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "HenkaSURU" 0 :normal))

(test* "okuri ari 5"
       '(("変化する" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "HenkaSuRu" 0 :normal))

(test* "okuri ari 6"
       '(("行う" #f "おこなu" j) ("行なう" "※送り位置補正" "おこなu" j))
       (henkan-okuri-ari userid kvs "okonaU" 0 :normal))

(test* "okuri ari 7"
       '(("行う" #f "おこなu" j) ("行なう" "※送り位置補正" "おこなu" j))
       (henkan-okuri-ari userid kvs "OkonaU" 0 :normal))

(test* "okuri ari 8"
       '(("行う" #f "おこなu" j) ("行なう" "※送り位置補正" "おこなu" j))
       (henkan-okuri-ari userid kvs "okonU" 0 :normal))

(test* "okuri ari 9"
       '(("見る" #f "みr" j) ("観る" "(字義:みわたす)" "みr" j) ("視る" "(字義:じっとみる)" "みr" j) ("診る" "(diagnose) 患者を診る" "みr" j) ("看る" "(nurse) 病母を看る" "みr" j) ("觀る" "「観」の旧字" "みr" j))
       (henkan-okuri-ari userid kvs "miRu" 0 :normal))

(test* "okuri ari 10"
       '(("見" #f "みr" j) ("観" "(字義:みわたす)" "みr" j) ("視" "(字義:じっとみる)" "みr" j) ("診" "(diagnose) 患者を診る" "みr" j) ("看" "(nurse) 病母を看る" "みr" j) ("觀" "「観」の旧字" "みr" j))
       (henkan-okuri-ari userid kvs "miR" 0 :normal))

(test* "okuri ari 11"
       '(("見る" #f "みr" j))
       (henkan-okuri-ari userid kvs "miRu" 1 :normal))

(test* "okuri ari 12"
       '(("見る" #f "みr" j) ("観る" "(字義:みわたす)" "みr" j))
       (henkan-okuri-ari userid kvs "miRu" 2 :normal))

(test* "okuri ari 13"
       '(("変化すんじゃ" #f "へんかs" j) ("変化すぬんあ" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSunja" 4 :normal))

(test* "okuri ari 14"
       '(("変化すぬんあ" #f "へんかs" j) ("変化すんじゃ" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSunja" 4 :azik))

(test* "okuri ari 15"
       '(("変化すること" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSrkt" 2 :normal))

(test* "okuri ari 16"
       '(("変化すること" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSrkt" 2 :azik))

(test* "okuri ari 17"
       '(("変化するかも" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSrkm" 2 :normal))

(test* "okuri ari 18"
       '(("変化するかも" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSrkm" 2 :azik))

(test* "okuri ari 19"
       '(("勝つ" #f "かt" j) ("買つ" #f "かt" j) ("飼つ" #f "かt" j) ("刈つ" "(crop)草を刈る" "かt" j))
       (henkan-okuri-ari userid kvs "kaTu" 0 :normal))

(test* "okuri ari 20"
       '(("勝った" #f "かt" j) ("買った" #f "かt" j) ("飼った" #f "かt" j) ("刈った" "(crop)草を刈る" "かt" j))
       (henkan-okuri-ari userid kvs "kaTta" 0 :normal))

(test* "okuri ari 21"
       '(("勝った" #f "か`" j) ("買った" #f "か`" j) ("飼った" #f "か`" j) ("刈った" "(crop)草を刈る" "か`" j))
       (henkan-okuri-ari userid kvs "ka`ta" 0 :normal))

(test* "okuri ari 22"
       '(("勝った" #f "か`" j) ("買った" #f "か`" j) ("飼った" #f "か`" j) ("刈った" "(crop)草を刈る" "か`" j))
       (henkan-okuri-ari userid kvs "ka`ta" 0 :azik))

;; 送り仮名が "R" で始っているのに、"t" や "`" もマッチしている理由は、送り仮名の開始子音1文字まで含めたJaro-WInkler distanceで候補で並べており、送り仮名が違うからといって排除しない方針をとっているため。
;; それにより送り仮名のミスタイプの許容をしている。
(test* "okuri ari 23"
       '(("ブログりました" #f "ぶろぐr" j) ("ブログりました" #f "ぶろぐt" j) ("ブログりました" #f "ぶろぐ`" j))
       (henkan-okuri-ari userid kvs "buroguRimashita" 0 :normal))

(test* "okuri ari 24"
       '(("ブログった" #f "ぶろぐt" j) ("ブログった" #f "ぶろぐr" j) ("ブログった" #f "ぶろぐ`" j))
       (henkan-okuri-ari userid kvs "buroguTta" 0 :normal))

;;-------------------------------------------------------------------
(test-section "henkan hiragana")

(test* "hiragana 1"
       '(("あいうえお" #f "aiueo" h) ("アイウエオ" #f "aiueo" k))
       (henkan-hiragana kvs "aiueo" :normal))

(test* "hiragana 2"
       '(("の" #f "no" h) ("ノ" #f "no" k))
       (henkan-hiragana kvs "no" :normal))

(test* "hiragana 3"
       '(("b" #f "b" j))
       (henkan-hiragana kvs "b" :normal))

(test* "hiragana 4"
       '(("if" #f "if" j))
       (henkan-hiragana kvs "if" :normal))

(test* "hiragana 5"
       '(("ぁぃぅぇぉゃゅょ" #f "lalilulelolyalyulyo" h) ("ァィゥェォャュョ" #f "lalilulelolyalyulyo" k))
       (henkan-hiragana kvs "lalilulelolyalyulyo" :normal))

(test* "hiragana 6"
       '(("することです" #f "srktds" h) ("スルコトデス" #f "srktds" k))
       (henkan-hiragana kvs "srktds" :normal))

(test* "hiragana 7"
       '(("することです" #f "srktds" h) ("スルコトデス" #f "srktds" k))
       (henkan-hiragana kvs "srktds" :azik))

(test* "hiragana 8"
       '(("んんあんはんわんぱ" #f "nqanhanwanpa" h) ("ンンアンハンワンパ" #f "nqanhanwanpa" k) ("ないあぬうあねいあのうあ" #f "nqanhanwanpa" h) ("ナイアヌウアネイアノウア" #f "nqanhanwanpa" k))
       (henkan-hiragana kvs "nqanhanwanpa" :normal))

(test* "hiragana 9"
       '(("ないあぬうあねいあのうあ" #f "nqanhanwanpa" h) ("ナイアヌウアネイアノウア" #f "nqanhanwanpa" k) ("んんあんはんわんぱ" #f "nqanhanwanpa" h) ("ンンアンハンワンパ" #f "nqanhanwanpa" k))
       (henkan-hiragana kvs "nqanhanwanpa" :azik))


;;-------------------------------------------------------------------
(test-section "henkan non-kanji")

(test* "non-kanji 1"
       '(("｛" #f "{" j))
       (henkan-non-kanji userid kvs "{"))

(test* "non-kanji 2"
       '(("！" #f "!" j) ("感嘆符" #f "!" j))
       (henkan-non-kanji userid kvs "!"))

(test* "non-kanji 3"
       '(("／" #f "/" j) ("÷" #f "/" j))
       (henkan-non-kanji userid kvs "/"))

(test* "non-kanji 4"
       '(("≠" #f "!=" j))
       (henkan-non-kanji userid kvs "!="))

(test* "non-kanji 5"
       '(("．" #f "." j) ("・" #f "." j) ("。" #f "." j) ("…" "..." "." j))
       (henkan-non-kanji userid kvs "."))


;;-------------------------------------------------------------------
(test-section "sekka henkan toplevel")

(test* "henkan toplevel 1"
       '(("＊" #f "*" j 0) ("※" #f "*" j 1) ("×" #f "*" j 2))
       (sekka-henkan userid kvs "*" 0 :normal))

(test* "henkan toplevel 2"
       '(("しぜんげんごりか" #f "shizengengorika" h 0) ("シゼンゲンゴリカ" #f "shizengengorika" k 1) ("しぜにぇにょりか" #f "shizengengorika" h 2) ("シゼニェニョリカ" #f "shizengengorika" k 3) ("自然言語理解" #f "しぜんげんごりかい" j 4) ("自然言語" #f "しぜんげんご" j 5) ("自然言語処理" #f "しぜんげんごしょり" j 6))
       (sekka-henkan userid kvs "shizengengorika" 0 :normal))

(test* "henkan toplevel 3"
       '(("自然言語理解" #f "しぜんげんごりかい" j 0) ("自然言語" #f "しぜんげんご" j 1) ("自然言語処理" #f "しぜんげんごしょり" j 2) ("しぜんげんごりか" #f "shizengengorika" h 3) ("シゼンゲンゴリカ" #f "shizengengorika" k 4) ("しぜにぇにょりか" #f "shizengengorika" h 5) ("シゼニェニョリカ" #f "shizengengorika" k 6))
       (sekka-henkan userid kvs "Shizengengorika" 0 :normal))

(test* "henkan toplevel 4"
       '(("変化する" #f "へんかs" j 0) ("へんかする" #f "henkasuru" h 1) ("ヘンカスル" #f "henkasuru" k 2) ("へにんあする" #f "henkasuru" h 3) ("ヘニンアスル" #f "henkasuru" k 4))
       (sekka-henkan userid kvs "henkaSuru" 0 :normal))

(test* "henkan toplevel 5"
       '(("変換" #f "へんかん" j 0) ("返還" #f "へんかん" j 1) ("変化" #f "へんか" j 2) ("返歌" #f "へんか" j 3) ("へんかん" #f "henkan" h 4) ("ヘンカン" #f "henkan" k 5) ("へにんあん" #f "henkan" h 6) ("ヘニンアン" #f "henkan" k 7))
       (sekka-henkan userid kvs "Henkan" 0 :normal))

(test* "henkan toplevel 6"
       '(("へんかん" #f "henkan" h 0) ("ヘンカン" #f "henkan" k 1) ("へにんあん" #f "henkan" h 2) ("ヘニンアン" #f "henkan" k 3))
       (sekka-henkan userid kvs "HEnkan" 0 :normal))

(test* "henkan toplevel 7"
       '(("へんかん" #f "henkan" h 0) ("ヘンカン" #f "henkan" k 1) ("へにんあん" #f "henkan" h 2) ("ヘニンアン" #f "henkan" k 3))
       (sekka-henkan userid kvs "HENkan" 0 :normal))

(test* "henkan toplevel 8"
       '(("こーひー" #f "ko-hi-" h 0) ("コーヒー" #f "ko-hi-" k 1))
       (sekka-henkan userid kvs "Ko-hi-" 0 :normal))

(test* "henkan toplevel 9"
       '(("得る" #f "えr" j 0) ("獲る" "NB:「とr」と同形" "えr" j 1) ("選る" "NB:「よr」「すぐr」と同形" "えr" j 2) ("える" #f "eru" h 3) ("エル" #f "eru" k 4))
       (sekka-henkan userid kvs "eRu" 0 :normal))

(test* "henkan toplevel 10"
       '(("得る" #f "えr" j 0) ("獲る" "NB:「とr」と同形" "えr" j 1) ("選る" "NB:「よr」「すぐr」と同形" "えr" j 2) ("える" #f "eru" h 3) ("エル" #f "eru" k 4))
       (sekka-henkan userid kvs "ERu" 0 :normal))

(test* "henkan toplevel 11"
       '(("を" #f "wo" h 0) ("ヲ" #f "wo" k 1) ("小" #f "を" j 2) ("緒" #f "を" j 3) ("雄" #f "を" j 4) ("男" #f "を" j 5) ("牡" #f "を" j 6) ("尾" #f "を" j 7) ("悪" #f "を" j 8) ("汚" #f "を" j 9) ("惡" "「悪」の旧字(人名用漢字)" "を" j 10))
       (sekka-henkan userid kvs "wo" 0 :normal))

(test* "henkan toplevel 12"
       '()
       (sekka-henkan userid kvs "S" 0 :normal))

(test* "henkan toplevel 13"
       '()
       (sekka-henkan userid kvs "H" 0 :normal))

(test* "henkan toplevel 14"
       '()
       (sekka-henkan userid kvs "gitHuB" 0 :normal))

(test* "henkan toplevel 15"
       '()
       (sekka-henkan userid kvs "ChangeLog" 0 :normal))

(test* "henkan toplevel 16"
       '(("訳" #f "わけ" j 0) ("和気" "地名" "わけ" j 1) ("理由" "当て字" "わけ" j 2) ("分け" #f "わけ" j 3) ("分" #f "わけ" j 4) ("譯" "「訳」の旧字" "わけ" j 5) ("戯奴" #f "わけ" j 6) ("わけ" #f "wake" h 7) ("ワケ" #f "wake" k 8))
       (sekka-henkan userid kvs "Wake" 0 :normal))

(test* "henkan toplevel 17"
       '(("合う" "(一致) 話が合う" "あu" j 0) ("会う" "人と会う" "あu" j 1) ("遭う" "(偶然、特によくないことにあう) 事故に遭う" "あu" j 2) ("逢う" "(人と|運命的にあう) 巡り逢う" "あu" j 3) ("遇う" "≒遭う" "あu" j 4) ("會う" "「会」の旧字" "あu" j 5) ("あう" #f "au" h 6) ("アウ" #f "au" k 7))
       (sekka-henkan userid kvs "AU" 0 :normal))

(test* "henkan toplevel 18"
       '(("＊" #f "*" j 0) ("※" #f "*" j 1) ("×" #f "*" j 2))
       (sekka-henkan userid kvs "*" 1 :normal))

(test* "henkan toplevel 19"
       '(("しぜんげんごりか" #f "shizengengorika" h 0) ("シゼンゲンゴリカ" #f "shizengengorika" k 1) ("しぜにぇにょりか" #f "shizengengorika" h 2) ("シゼニェニョリカ" #f "shizengengorika" k 3) ("自然言語理解" #f "しぜんげんごりかい" j 4))
       (sekka-henkan userid kvs "shizengengorika" 1 :normal))

(test* "henkan toplevel 20"
       '(("自然言語理解" #f "しぜんげんごりかい" j 0) ("しぜんげんごりか" #f "shizengengorika" h 1) ("シゼンゲンゴリカ" #f "shizengengorika" k 2) ("しぜにぇにょりか" #f "shizengengorika" h 3) ("シゼニェニョリカ" #f "shizengengorika" k 4))
       (sekka-henkan userid kvs "Shizengengorika" 1 :normal))

(test* "henkan toplevel 21"
       '(("合う" "(一致) 話が合う" "あu" j 0) ("あう" #f "au" h 1) ("アウ" #f "au" k 2))
       (sekka-henkan userid kvs "AU" 1 :normal))

(test* "henkan toplevel 22"
       '(("いっち" #f "i@chi" h 0) ("イッチ" #f "i@chi" k 1) ("一致" #f "いっち" j 2))
       (sekka-henkan userid kvs "i@chi" 1 :normal))

(test* "henkan toplevel 23"
       '(("一致" #f "いっち" j 0) ("いっち" #f "i@chi" h 1) ("イッチ" #f "i@chi" k 2))
       (sekka-henkan userid kvs "I@chi" 1 :normal))

(test* "henkan toplevel 24"
       '(("かった" #f "ka@ta" h 0) ("カッタ" #f "ka@ta" k 1))
       (sekka-henkan userid kvs "ka@ta" 1 :normal))

(test* "henkan toplevel 25"
       '(("勝った" #f "か`" j 0) ("かった" #f "ka@ta" h 1) ("カッタ" #f "ka@ta" k 2))
       (sekka-henkan userid kvs "ka`ta" 1 :normal))

(test* "henkan toplevel 26"
       '(("確固" #f "かっこ" j 0) ("かっこ" #f "kakko" h 1) ("カッコ" #f "kakko" k 2))
       (sekka-henkan userid kvs "Kakko" 1 :normal))

(test* "henkan toplevel 27"
       '(("確固" #f "かっこ" j 0) ("かっこ" #f "ka@ko" h 1) ("カッコ" #f "ka@ko" k 2))
       (sekka-henkan userid kvs "Ka@ko" 1 :normal))



(test* "henkan toplevel(for Elisp) 1"
       '(("＊" nil "*" j 0) ("※" nil "*" j 1) ("×" nil "*" j 2))
       (sekkaHenkan userid kvs #f "*" 0 "normal"))

(test* "henkan toplevel(for Elisp) 2"
       '(("しぜんげんごりか" nil "shizengengorika" h 0) ("シゼンゲンゴリカ" nil "shizengengorika" k 1) ("しぜにぇにょりか" nil "shizengengorika" h 2) ("シゼニェニョリカ" nil "shizengengorika" k 3) ("自然言語理解" nil "しぜんげんごりかい" j 4) ("自然言語" nil "しぜんげんご" j 5) ("自然言語処理" nil "しぜんげんごしょり" j 6))
       (sekkaHenkan userid kvs #f "shizengengorika" 0 "normal"))

(test* "henkan toplevel(for Elisp) 3"
       '(("自然言語理解" nil "しぜんげんごりかい" j 0) ("自然言語" nil "しぜんげんご" j 1) ("自然言語処理" nil "しぜんげんごしょり" j 2) ("しぜんげんごりか" nil "shizengengorika" h 3) ("シゼンゲンゴリカ" nil "shizengengorika" k 4) ("しぜにぇにょりか" nil "shizengengorika" h 5) ("シゼニェニョリカ" nil "shizengengorika" k 6))
       (sekkaHenkan userid kvs #f "Shizengengorika" 0 "normal"))

(test* "henkan toplevel(for Elisp) 4"
       '(("変化する" nil "へんかs" j 0) ("へんかする" nil "henkasuru" h 1) ("ヘンカスル" nil "henkasuru" k 2) ("へにんあする" nil "henkasuru" h 3) ("ヘニンアスル" nil "henkasuru" k 4))
       (sekkaHenkan userid kvs #f "henkaSuru" 0 "normal"))

(test* "henkan toplevel(for Elisp) 5"
       '(("変換" nil "へんかん" j 0) ("返還" nil "へんかん" j 1) ("変化" nil "へんか" j 2) ("返歌" nil "へんか" j 3) ("へんかん" nil "henkan" h 4) ("ヘンカン" nil "henkan" k 5) ("へにんあん" nil "henkan" h 6) ("ヘニンアン" nil "henkan" k 7))
       (sekkaHenkan userid kvs #f "Henkan" 0 "normal"))

(test* "henkan toplevel(for Elisp) 6"
       '(("マジパネェ" nil "まじぱねぇ" j 0) ("まじパネェ" nil "まじぱねぇ" j 1) ("マジ半端ネェ" nil "まじぱねぇ" j 2) ("まじ半端ネェ" nil "まじぱねぇ" j 3) ("まじぱねえ" nil "majipanee" h 4) ("マジパネエ" nil "majipanee" k 5))
       (sekkaHenkan userid kvs #f "Majipanee" 0 "normal"))

(test* "henkan toplevel(for Elisp) 7"
       '(("変換エンジン" nil "へんかんえんじん" j 0) ("変換" nil "へんかん" j 1) ("返還" nil "へんかん" j 2) ("へんかねんじ" nil "henkanenji" h 3) ("ヘンカネンジ" nil "henkanenji" k 4) ("へにんあねぬんい" nil "henkanenji" h 5) ("ヘニンアネヌンイ" nil "henkanenji" k 6))
       (sekkaHenkan userid kvs #f "Henkanenji" 0 "normal"))

(test* "henkan toplevel(for Elisp) 8"
       '(("ブログった" nil "ぶろぐt" j 0) ("ブログった" nil "ぶろぐr" j 1) ("ブログった" nil "ぶろぐ`" j 2) ("ぶろぐった" nil "burogutta" h 3) ("ブログッタ" nil "burogutta" k 4))
       (sekkaHenkan userid kvs #f "buroguTta" 0 "normal"))

(test* "henkan toplevel(for Elisp) 9"
       '(("ブログりました" nil "ぶろぐr" j 0) ("ブログりました" nil "ぶろぐt" j 1) ("ブログりました" nil "ぶろぐ`" j 2) ("ぶろぐりました" nil "burogurimashita" h 3) ("ブログリマシタ" nil "burogurimashita" k 4))
       (sekkaHenkan userid kvs #f "buroguRimashita" 0 "normal"))

(test* "henkan toplevel(for Elisp) 10"
       '(("はてブ" nil "はてぶ" j 0) ("はてなブックマーク" nil "はてぶ" j 1) ("はてぶ" nil "hatebu" h 2) ("ハテブ" nil "hatebu" k 3))
       (sekkaHenkan userid kvs #f "Hatebu" 0 "normal"))

(test* "henkan toplevel(for Elisp) 11"
       '(("かに" nil "kani" h 0) ("カニ" nil "kani" k 1) ("蟹" nil "かに" j 2) ("可児" nil "かに" j 3) ("蠏" nil "かに" j 4) ("簡易" nil "かんい" j 5) ("官位" nil "かんい" j 6) ("冠位" "-十二階" "かんい" j 7) ("漢医" "漢方医" "かんい" j 8) ("敢為" nil "かんい" j 9) ("官医" nil "かんい" j 10) ("寛衣" nil "かんい" j 11) ("換位" nil "かんい" j 12) ("簡意" nil "かんい" j 13))
       (sekkaHenkan userid kvs #f "kani" 0 "normal"))

(test* "henkan toplevel(for Elisp) 12"
       '(("かんい" nil "kanni" h 0) ("カンイ" nil "kanni" k 1) ("簡易" nil "かんい" j 2) ("官位" nil "かんい" j 3) ("冠位" "-十二階" "かんい" j 4) ("漢医" "漢方医" "かんい" j 5) ("敢為" nil "かんい" j 6) ("官医" nil "かんい" j 7) ("寛衣" nil "かんい" j 8) ("換位" nil "かんい" j 9) ("簡意" nil "かんい" j 10) ("蟹" nil "かに" j 11) ("可児" nil "かに" j 12) ("蠏" nil "かに" j 13))
       (sekkaHenkan userid kvs #f "kanni" 0 "normal"))


;;-------------------------------------------------------------------
(test-section "henkan kakutei")
(test* "henkan kakutei(for Elisp) 1"
       '(("返還" nil "へんかん" j 0) ("変換" nil "へんかん" j 1) ("変化" nil "へんか" j 2) ("返歌" nil "へんか" j 3) ("へんかん" nil "henkan" h 4) ("ヘンカン" nil "henkan" k 5) ("へにんあん" nil "henkan" h 6) ("ヘニンアン" nil "henkan" k 7))
       (begin
         (sekkaKakutei userid kvs #f "へんかん" "返還")
         (sekkaHenkan userid kvs #f "Henkan" 0 "normal")))

(test* "DB check after henkan kakutei 1"
       "/返還/変換"
       (. (hash-table-get db (+ userid "::へんかん") #f) force_encoding "UTF-8"))

(test* "henkan kakutei(for Elisp) 2"
       '(("変換" nil "へんかん" j 0) ("返還" nil "へんかん" j 1) ("変化" nil "へんか" j 2) ("返歌" nil "へんか" j 3) ("へんかん" nil "henkan" h 4) ("ヘンカン" nil "henkan" k 5) ("へにんあん" nil "henkan" h 6) ("ヘニンアン" nil "henkan" k 7))
       (begin
         (sekkaKakutei userid kvs #f "へんかん" "変換")
         (sekkaHenkan userid kvs #f "Henkan" 0 "normal")))

(test* "DB check after henkan kakutei 2"
       "/変換/返還"
       (. (hash-table-get db (+ userid "::へんかん") #f) force_encoding "UTF-8"))

(test* "henkan kakutei(for Elisp) 3"
       '(("デベロッパ" nil "developer" j 0) ("デベロッパー" nil "developer" j 1) ("ディベロッパー" nil "developer" j 2))
       (begin
         (sekkaKakutei userid kvs #f "developer" "デベロッパ")
         (sekkaHenkan userid kvs #f "developer" 0 "normal")))

(test* "henkan kakutei(for Elisp) 4"
       '(("。" nil "." j 0) ("．" nil "." j 1) ("・" nil "." j 2) ("…" "..." "." j 3))
       (begin
         (sekkaKakutei userid kvs #f "." "。")
         (sekkaHenkan userid kvs #f "." 0 "normal")))

(test* "henkan kakutei(for Elisp) 5"
       nil
       (sekkaKakutei userid kvs #f "." "。"))

(test* "henkan kakutei(for Elisp) 6"
       nil
       (sekkaKakutei userid kvs #f "developper" "デベロッパ"))

(test* "henkan kakutei(for Elisp) 7"
       nil
       (sekkaKakutei userid kvs #f "wo" "を"))

(test* "henkan kakutei(for Elisp) 8"
       '(("はてなブックマーク" nil "はてぶ" j 0) ("はてブ" nil "はてぶ" j 1) ("はてぶ" nil "hatebu" h 2) ("ハテブ" nil "hatebu" k 3))
       (begin
         (sekkaKakutei userid kvs #f "はてぶ" "はてなブックマーク")
         (sekkaHenkan userid kvs #f "Hatebu" 0 "normal")))


(test* "henkan kakutei(for Elisp) 9"
       '(("．" nil "." j 0) ("・" nil "." j 1) ("。" nil "." j 2) ("…" "..." "." j 3))
       (begin
         (sekkaHenkan userid2 kvs #f "." 0 "normal")))                  ;; userid2

(test* "henkan kakutei(for Elisp) 10"
       '(("。" nil "." j 0) ("．" nil "." j 1) ("・" nil "." j 2) ("…" "..." "." j 3))
       (begin
         (sekkaKakutei userid2 kvs #f "." "。")                        ;; userid2
         (sekkaHenkan userid2 kvs #f "." 0 "normal")))                  ;; userid2

(test* "henkan kakutei(for Elisp) 11"
       '(("。" nil "." j 0) ("．" nil "." j 1) ("・" nil "." j 2) ("…" "..." "." j 3))
       (begin
         (sekkaHenkan userid2 kvs #f "." 0 "normal")))                  ;; userid2

(test* "henkan kakutei(for Elisp) 12"
       nil
       (sekkaKakutei userid2 kvs #f "wo" "を"))                        ;; userid2


(test* "henkan kakutei(for Elisp) 13"
       '(("観" "(字義:みわたす)" "みr" j 0) ("見" nil "みr" j 1) ("視" "(字義:じっとみる)" "みr" j 2) ("診" "(diagnose) 患者を診る" "みr" j 3) ("看" "(nurse) 病母を看る" "みr" j 4) ("觀" "「観」の旧字" "みr" j 5))
       (begin
         (sekkaKakutei userid kvs #f "みr" "観")
         (sekkaHenkan userid kvs #f "miR" 0 "normal")))

(test* "henkan kakutei(for Elisp) 14"
       '(("視" "(字義:じっとみる)" "みr" j 0) ("観" "(字義:みわたす)" "みr" j 1) ("見" nil "みr" j 2) ("診" "(diagnose) 患者を診る" "みr" j 3) ("看" "(nurse) 病母を看る" "みr" j 4) ("觀" "「観」の旧字" "みr" j 5))
       (begin
         (sekkaKakutei userid kvs #f "みr" "視")
         (sekkaHenkan userid kvs #f "miR" 0 "normal")))

(test* "henkan kakutei(for Elisp) 15"
       '(("観る" "(字義:みわたす)" "みr" j 0) ("見る" nil "みr" j 1) ("視る" "(字義:じっとみる)" "みr" j 2) ("診る" "(diagnose) 患者を診る" "みr" j 3) ("看る" "(nurse) 病母を看る" "みr" j 4) ("觀る" "「観」の旧字" "みr" j 5) ("みる" nil "miru" h 6) ("ミル" nil "miru" k 7))
       (begin
         (sekkaKakutei userid2 kvs #f "みr" "観る")                    ;; userid2
         (sekkaHenkan userid2 kvs #f "miRu" 0 "normal")))               ;; userid2

(test* "henkan kakutei(for Elisp) 16"
       '(("かに" nil "kani" h 0) ("カニ" nil "kani" k 1) ("可児" nil "かに" j 2) ("蟹" nil "かに" j 3) ("蠏" nil "かに" j 4) ("簡易" nil "かんい" j 5) ("官位" nil "かんい" j 6) ("冠位" "-十二階" "かんい" j 7) ("漢医" "漢方医" "かんい" j 8) ("敢為" nil "かんい" j 9) ("官医" nil "かんい" j 10) ("寛衣" nil "かんい" j 11) ("換位" nil "かんい" j 12) ("簡意" nil "かんい" j 13))
       (begin
         (sekkaKakutei userid kvs #f "かに" "可児")
         (sekkaHenkan userid kvs #f "kani" 0 "normal")))
(test* "henkan kakutei(for Elisp) 17"
       '(("かんい" nil "kanni" h 0) ("カンイ" nil "kanni" k 1) ("官位" nil "かんい" j 2) ("簡易" nil "かんい" j 3) ("冠位" "-十二階" "かんい" j 4) ("漢医" "漢方医" "かんい" j 5) ("敢為" nil "かんい" j 6) ("官医" nil "かんい" j 7) ("寛衣" nil "かんい" j 8) ("換位" nil "かんい" j 9) ("簡意" nil "かんい" j 10) ("可児" nil "かに" j 11) ("蟹" nil "かに" j 12) ("蠏" nil "かに" j 13))
       (begin
         (sekkaKakutei userid kvs #f "かんい" "官位")
         (sekkaHenkan userid kvs #f "kanni" 0 "normal")))

;;===================================================================

;; ---後処理---
;; 最終的な辞書の状態を見たい時、dumpしてみること。
(db.close)
(dump-sekka-jisyo-f STDOUT target)

(test-end)
