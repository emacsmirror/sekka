;;-*- mode: nendo; syntax: scheme -*-;;
;;-* encode : utf-8 -*-
;; test for sekka jisyo library

(use nendo.test)
(require "./lib/kvs")
(load "./lib/convert-jisyo.nnd")
(load "./lib/henkan.nnd")
(load "./test/common.nnd")

(define dbtype   (string->symbol (first *argv*)))
(define userid   "dummy")
(define userid2  "dummy2")

(test-start "henkan engine")
;;===================================================================

;;-------------------------------------------------------------------
(define target   nil)
(cond
 ((eq? dbtype 'tokyocabinet)
  (set! target "./test.tch"))
 ((eq? dbtype 'memcache)
  (set! target "localhost:11211"))
 (else
  (errorf "Unsupported db type [%s]" (symbol->string dbtype))))


;;-------------------------------------------------------------------
(test-section "Create jisyo for test suite")

(let ((_input (StringIO.new
               (string-join
                '(
                  "わたしh /私/"
                  "おこなu /行/行な;※送り位置補正/"
                  "へんかん /変換/返還/"
                  "へんか /変化/返歌/"
                  "へんかs /変化/"
                  "しぜんげんご /自然言語/"
                  "しぜんげんごしょり /自然言語処理/"
                  "しぜんげんごりかい /自然言語理解/"
                  "developer /デベロッパー/ディベロッパー/デベロッパ/"
                  ">あん /案/"
                  "{ /｛/"
                  "かっこ /確固/括弧/各個/各戸/確乎/羯鼓;雅楽の打楽器/格好/『/』;二重鉤括弧/【/】;隅付き括弧/［/］;大括弧(bracket)/〔/〕;亀甲括弧/〈/〉;山括弧/《/》;二重山括弧/｛/｝;中括弧(brace)/「/」;鉤括弧/（/）;小括弧,丸括弧(parenthesis)/‘/’;singlequote/“/”;doublequote/『』/【】/［］/〔〕/〈〉/《》/｛｝/「」/（）/‘’/“”/"
                  "こっか /国家;state/国歌;anthem.「-斉唱」/国花/骨化/國家;「国」旧字/黒化/刻下/】/）/］/』/"
                  "! /！/感嘆符/"
                  ". /．/・/。/…;.../"
                  "* /＊/※/×/"
                  "? /？/"
                  "/ /／/÷/"
                  "!= /≠/"
                  "こーひー /コーヒー/"
                  "かに /蟹/可児/蠏/"
                  "かんい /簡易/官位/冠位;-十二階/漢医;漢方医/敢為/官医/寛衣/換位/簡意/"
                  "いっち /一致/"
                  "いっち /イッチ/"
                  "えr /得/獲;NB:「とr」と同形/選;NB:「よr」「すぐr」と同形/"
                  "を /小/緒/雄/男/牡/尾/悪/汚/惡;「悪」の旧字(人名用漢字)/"
                  "みr /見/観;(字義:みわたす)/視;(字義:じっとみる)/診;(diagnose) 患者を診る/看;(nurse) 病母を看る/觀;「観」の旧字/"
                  "wake /ウェイク/"
                  "わけ /訳/和気;地名/理由;当て字/分け/分/譯;「訳」の旧字/戯奴/"
                  )
                "\n")))
      (sekka-jisyo-data
       '("watashiH Cわたしh" "watasiH Cわたしh" "わたしh /私" "okonaU Cおこなu" "oconaU Cおこなu" "おこなu /行/行な;※送り位置補正" "hennkann Cへんかん" "hennkan Cへんかん" "henncann Cへんかん" "henncan Cへんかん" "henkann Cへんかん" "henkan Cへんかん" "hencann Cへんかん" "hencan Cへんかん" "へんかん /変換/返還" "hennka Cへんか" "hennca Cへんか" "henka Cへんか" "henca Cへんか" "へんか /変化/返歌" "hennkaS Cへんかs" "henncaS Cへんかs" "henkaS Cへんかs" "hencaS Cへんかs" "へんかs /変化" "shizenngenngo Cしぜんげんご" "shizenngengo Cしぜんげんご" "shizengenngo Cしぜんげんご" "shizengengo Cしぜんげんご" "sizenngenngo Cしぜんげんご" "sizenngengo Cしぜんげんご" "sizengenngo Cしぜんげんご" "sizengengo Cしぜんげんご" "しぜんげんご /自然言語" "shizenngenngoshori Cしぜんげんごしょり" "shizenngenngosyori Cしぜんげんごしょり" "shizenngengoshori Cしぜんげんごしょり" "shizenngengosyori Cしぜんげんごしょり" "shizengenngoshori Cしぜんげんごしょり" "shizengenngosyori Cしぜんげんごしょり" "shizengengoshori Cしぜんげんごしょり" "shizengengosyori Cしぜんげんごしょり" "sizenngenngoshori Cしぜんげんごしょり" "sizenngenngosyori Cしぜんげんごしょり" "sizenngengoshori Cしぜんげんごしょり" "sizenngengosyori Cしぜんげんごしょり" "sizengenngoshori Cしぜんげんごしょり" "sizengenngosyori Cしぜんげんごしょり" "sizengengoshori Cしぜんげんごしょり" "sizengengosyori Cしぜんげんごしょり" "しぜんげんごしょり /自然言語処理" "shizenngenngorikai Cしぜんげんごりかい" "shizenngenngoricai Cしぜんげんごりかい" "shizenngengorikai Cしぜんげんごりかい" "shizenngengoricai Cしぜんげんごりかい" "shizengenngorikai Cしぜんげんごりかい" "shizengenngoricai Cしぜんげんごりかい" "shizengengorikai Cしぜんげんごりかい" "shizengengoricai Cしぜんげんごりかい" "sizenngenngorikai Cしぜんげんごりかい" "sizenngenngoricai Cしぜんげんごりかい" "sizenngengorikai Cしぜんげんごりかい" "sizenngengoricai Cしぜんげんごりかい" "sizengenngorikai Cしぜんげんごりかい" "sizengenngoricai Cしぜんげんごりかい" "sizengengorikai Cしぜんげんごりかい" "sizengengoricai Cしぜんげんごりかい" "しぜんげんごりかい /自然言語理解" "developer /デベロッパー/ディベロッパー/デベロッパ" ">ann C>あん" ">an C>あん" ">あん /案" "{ /｛" "kakko Cかっこ" "cakko Cかっこ" "かっこ /確固/括弧/各個/各戸/確乎/羯鼓;雅楽の打楽器/格好/『/』;二重鉤括弧/【/】;隅付き括弧/［/］;大括弧(bracket)/〔/〕;亀甲括弧/〈/〉;山括弧/《/》;二重山括弧/｛/｝;中括弧(brace)/「/」;鉤括弧/（/）;小括弧,丸括弧(parenthesis)/‘/’;singlequote/“/”;doublequote/『』/【】/［］/〔〕/〈〉/《》/｛｝/「」/（）/‘’/“”" "kokka Cこっか" "cokka Cこっか" "こっか /国家;state/国歌;anthem.「-斉唱」/国花/骨化/國家;「国」旧字/黒化/刻下/】/）/］/』" "! /！/感嘆符" ". /．/・/。/…;..." "* /＊/※/×" "? /？" "/ /／/÷" "!= /≠" "ko-hi- Cこーひー" "ko-hi^ Cこーひー" "ko^hi- Cこーひー" "ko^hi^ Cこーひー" "co-hi- Cこーひー" "co-hi^ Cこーひー" "co^hi- Cこーひー" "co^hi^ Cこーひー" "こーひー /コーヒー" "kani Cかに" "cani Cかに" "かに /蟹/可児/蠏" "kanni Cかんい" "kani Cかんい" "canni Cかんい" "cani Cかんい" "かんい /簡易/官位/冠位;-十二階/漢医;漢方医/敢為/官医/寛衣/換位/簡意" "icchi Cいっち" "ittyi Cいっち" "いっち /一致" "icchi Cいっち" "ittyi Cいっち" "いっち /イッチ" "eR Cえr" "えr /得/獲;NB:「とr」と同形/選;NB:「よr」「すぐr」と同形" "wo Cを" "を /小/緒/雄/男/牡/尾/悪/汚/惡;「悪」の旧字(人名用漢字)" "miR Cみr" "みr /見/観;(字義:みわたす)/視;(字義:じっとみる)/診;(diagnose)" "wake /ウェイク" "wake Cわけ" "wace Cわけ" "わけ /訳/和気;地名/理由;当て字/分け/分/譯;「訳」の旧字/戯奴")
       ))
       
  (test* "Create test jisyo"
         sekka-jisyo-data          
         (convert-skk-jisyo-f _input))

  (test* "default KVS type" 'tokyocabinet (get-kvs-type))

  (set-kvs-type dbtype)
  (test* "changed KVS type" dbtype (get-kvs-type))
  
  (let1 sio (StringIO.new (string-join sekka-jisyo-data "\n"))
    (sio.set_encoding "utf-8")
    (load-sekka-jisyo-f sio target)))


;;-------------------------------------------------------------------
(when (eq? dbtype 'tokyocabinet)
  (require "digest/sha1")
  (test-section "dump db")
  (let1 _output (StringIO.new)
    (_output.set_encoding "utf-8")
    (test* "dump DB to SEKKA jisyo file. (1)"
           "4932dd5ff608c29338882dbf5e87514f55cc7310"
           (begin
             (dump-sekka-jisyo-f _output target)
             (Digest::SHA1.hexdigest (_output.string))
             ;;(_output.string)
             ))))



(test-section "Open the test-suite DB")
(define a-search (ApproximateSearch.new 0.94))
(define kvs      (Kvs.new dbtype))
(cond
 ((eq? dbtype 'tokyocabinet)
  (kvs.open target)
  (require "tokyocabinet"))
 ((eq? dbtype 'memcache)
  (kvs.open target)
  (require "memcache"))
 (else
  (errorf "Unsupported db type [%s]" (symbol->string dbtype))))

(define db (kvs._db))



;;-------------------------------------------------------------------
(test-section "User dict's Queue utility")

(test* "pop 1"  #f    (kvs-pop! userid "(queue)"  kvs))
(test* "pop 2"  #f    (kvs-pop! userid "(stored)" kvs))

(test* "push 1"
       "100"
       (kvs-push! userid "(queue)"  kvs "100"))
(test* "push 2"
       "200"
       (kvs-push! userid "(queue)" kvs "200"))
(test* "pop 3"
       "100"
       (kvs-pop! userid "(queue)"  kvs)
       eq?)
(test* "pop 4"
       "200"
       (kvs-pop! userid "(queue)"  kvs))
(test* "pop 5"
       #f
       (kvs-pop! userid "(queue)"  kvs))

(test* "push 3"
       "aaaa"
       (kvs-push! userid "(stored)"  kvs "aaaa"))
(test* "pop 6"
       #f
       (kvs-pop! userid2 "(stored)"  kvs))    ;; userid2
(test* "pop 7"
       "aaaa"
       (kvs-pop! userid "(stored)"  kvs))
(test* "pop 8"
       #f
       (kvs-pop! userid "(stored)"  kvs))


(test-section "Register User dict")
(test* "register queue dict 1"
       4
       (registerUserJisyo userid kvs (string-join
                                      '(
                                        "まじぱねぇ /マジパネェ/"
                                        "ぶろぐr /ブログ/"
                                        "ぶろぐt /ブログ/"
                                        "へんかんえんじん /変換エンジン/"
                                        )
                                      "\n")))
(test* "register queue user dict 2"
       1
       (registerUserJisyo userid kvs "はてぶ /はてブ/はてなブックマーク/\n"))

(test* "register queue user dict 3"
       1
       (registerUserJisyo userid kvs "はてぶ /はてブ/はてなブックマーク/\n"))

(test* "register queue user dict 4"
       1
       (registerUserJisyo userid kvs "まじぱねぇ /マジパネェ/まじパネェ/マジ半端ネェ/まじ半端ネェ/\n"))

(for-each
 (lambda (str n)
   (test* (sprintf "store user dict %d" n)
          str
          (processUserJisyo userid kvs)))
 '("まじぱねぇ /マジパネェ/"
   "ぶろぐr /ブログ/"
   "ぶろぐt /ブログ/"
   "へんかんえんじん /変換エンジン/"
   "はてぶ /はてブ/はてなブックマーク/"
   nil
   "まじぱねぇ /マジパネェ/まじパネェ/マジ半端ネェ/まじ半端ネェ/"
   nil
   nil)
 (range 10 1))


;;-------------------------------------------------------------------
(test-section "simple db fetch")
(test* "db fetch 1"
       "Cへんかん"
       (. (hash-table-get db "MASTER::henkan" #f) force_encoding "UTF-8"))

(test* "db fetch 2"
       "Cかに/かんい"
       (. (hash-table-get db "MASTER::kani" #f) force_encoding "UTF-8"))

(test* "db fetch 3"
       "Cかんい"
       (. (hash-table-get db "MASTER::kanni" #f) force_encoding "UTF-8"))

(test* "db fetch 4"
       #f
       (hash-table-get db "MASTER::aaaa" #f))

(test* "db fetch 5"
       "Cへんかんえんじん"
       (. (hash-table-get db "dummy::henkanenjin" #f) force_encoding "UTF-8"))


;;-------------------------------------------------------------------
(test-section "approximate-search core")

(test* "search keyword list 1"
       '((1.0 "henkan") (0.9714 "henkann") (0.9667 "henka") (0.9611 "hennka"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "henkan" #f))))

(test* "search keyword list 2"
       '((1.0 "hennkan") (0.975 "hennkann") (0.9714 "hennka") (0.9667 "henkann") (0.9429 "henncan"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "hennkan" #f))))

(test* "search keyword list 3"
       '((1.0 "henkann") (0.9714 "henkan") (0.9667 "hennkan") (0.9429 "henka"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "henkann" #f))))

(test* "search keyword list 4"
       '((1.0 "hennkann") (0.975 "hennkan") (0.95 "hennka") (0.95 "henncann"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "hennkann" #f))))

(test* "search keyword list 5"
       '((0.9714 "henkaS") (0.9667 "hennkaS"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "henkanS" #t))))

(test* "search keyword list 6"
       '((0.975 "hennkaS") (0.9417 "henkaS"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "hennkanS" #t))))

(test* "approximate search 1"
       '((1.0 "henka" "Cへんか") (0.9667 "henkan" "Cへんかん") (0.9611 "hennka" "Cへんか") (0.9429 "henkann" "Cへんかん"))
       (my-round-map
        (approximate-search userid kvs "henka" #f)))

(test* "approximate search 2"
       '((1.0 "hennka" "Cへんか") (0.9714 "hennkan" "Cへんかん") (0.9611 "henkan" "Cへんかん") (0.9611 "henka" "Cへんか") (0.95 "hennkann" "Cへんかん"))
       (my-round-map
        (approximate-search userid kvs "hennka" #f)))

(test* "approximate search 3"
       '((0.9667 "henka" "Cへんか"))
       (my-round-map
        (approximate-search userid kvs "henkaS" #f)))

(test* "approximate search 4"
       '((0.9714 "hennka" "Cへんか") (0.9429 "hennkan" "Cへんかん"))
       (my-round-map
        (approximate-search userid kvs "hennkaS" #f)))

(test* "approximate search 5"
       '((1.0 "kani" "Cかに") (1.0 "kani" "Cかんい") (0.9533 "kanni" "Cかんい"))
       (my-round-map
        (approximate-search userid kvs "kani" #f)))


;;-------------------------------------------------------------------
(test-section "henkan (okuri nashi)")

(test* "okuri nashi 1"
       '(("変換" #f "へんかん") ("返還" #f "へんかん") ("変化" #f "へんか") ("返歌" #f "へんか"))
       (henkan-okuri-nashi userid kvs "henkan"))

(test* "okuri nashi 2"
       '(("変化" #f "へんか") ("返歌" #f "へんか") ("変換" #f "へんかん") ("返還" #f "へんかん"))
       (henkan-okuri-nashi userid kvs "henka"))

(test* "okuri nashi 3"
       '(("変換" #f "へんかん") ("返還" #f "へんかん") ("変化" #f "へんか") ("返歌" #f "へんか"))
       (henkan-okuri-nashi userid kvs "henkann"))

(test* "okuri nashi 4"
       '(("変換" #f "へんかん") ("返還" #f "へんかん") ("変化" #f "へんか") ("返歌" #f "へんか"))
       (henkan-okuri-nashi userid kvs "hennkan"))

(test* "okuri nashi 5"
       '(("変換" #f "へんかん") ("返還" #f "へんかん") ("変化" #f "へんか") ("返歌" #f "へんか"))
       (henkan-okuri-nashi userid kvs "hennkann"))

(test* "okuri nashi 6"
       '(("自然言語" #f "しぜんげんご"))
       (henkan-okuri-nashi userid kvs "shizengengo"))

(test* "okuri nashi 7"
       '(("自然言語処理" #f "しぜんげんごしょり") ("自然言語" #f "しぜんげんご"))
       (henkan-okuri-nashi userid kvs "shizengengosyo"))

(test* "okuri nashi 8"
       '(("案" #f ">あん"))
       (henkan-okuri-nashi userid kvs ">an"))

(test* "okuri nashi 9"
       '(("案" #f ">あん"))
       (henkan-okuri-nashi userid kvs ">ann"))

(test* "okuri nashi 10"
       '(("デベロッパー" #f "developper") ("ディベロッパー" #f "developper") ("デベロッパ" #f "developper"))
       (henkan-okuri-nashi userid kvs "developper"))

(test* "okuri nashi 11"
       '(("蟹" #f "かに") ("可児" #f "かに") ("蠏" #f "かに") ("簡易" #f "かんい") ("官位" #f "かんい") ("冠位" "-十二階" "かんい") ("漢医" "漢方医" "かんい") ("敢為" #f "かんい") ("官医" #f "かんい") ("寛衣" #f "かんい") ("換位" #f "かんい") ("簡意" #f "かんい"))
       (henkan-okuri-nashi userid kvs "kani"))

(test* "okuri nashi 12"
       '(("簡易" #f "かんい") ("官位" #f "かんい") ("冠位" "-十二階" "かんい") ("漢医" "漢方医" "かんい") ("敢為" #f "かんい") ("官医" #f "かんい") ("寛衣" #f "かんい") ("換位" #f "かんい") ("簡意" #f "かんい") ("蟹" #f "かに") ("可児" #f "かに") ("蠏" #f "かに"))
       (henkan-okuri-nashi userid kvs "kanni"))


;;-------------------------------------------------------------------
(test-section "henkan (okuri ari)")

(test* "approximate search 1"
       '((1.0 "henkaS" "Cへんかs") (0.9667 "hennkaS" "Cへんかs"))
       (my-round-map
        (approximate-search userid kvs "henkaS" #t)))

(test* "approximate search 2"
       '((0.9714 "henkaS" "Cへんかs") (0.9667 "hennkaS" "Cへんかs"))
       (my-round-map
        (approximate-search userid kvs "henkanS" #t)))

(test* "approximate search 3"
       '((1.0 "okonaU" "Cおこなu"))
       (my-round-map
        (approximate-search userid kvs "okonaU" #t)))

(test* "approximate search 4"
       '((0.9667 "okonaU" "Cおこなu"))
       (my-round-map
        (approximate-search userid kvs "okonU" #t)))

(test* "approximate search 5"
       '((1.0 "eR" "Cえr"))
       (my-round-map
        (approximate-search userid kvs "eR" #t)))

(test* "okuri ari 1"
       '(("私は" #f "わたしh"))
       (henkan-okuri-ari userid kvs "watashiHa"))

(test* "okuri ari 2"
       '(("変化する" #f "へんかs"))
       (henkan-okuri-ari userid kvs "henkaSuru"))

(test* "okuri ari 3"
       '(("変化する" #f "へんかs"))
       (henkan-okuri-ari userid kvs "HenkaSuru"))

(test* "okuri ari 4"
       '(("変化する" #f "へんかs"))
       (henkan-okuri-ari userid kvs "HenkaSURU"))

(test* "okuri ari 5"
       '(("変化する" #f "へんかs"))
       (henkan-okuri-ari userid kvs "HenkaSuRu"))

(test* "okuri ari 6"
       '(("行う" #f "おこなu") ("行なう" "※送り位置補正" "おこなu"))
       (henkan-okuri-ari userid kvs "okonaU"))

(test* "okuri ari 7"
       '(("行う" #f "おこなu") ("行なう" "※送り位置補正" "おこなu"))
       (henkan-okuri-ari userid kvs "OkonaU"))

(test* "okuri ari 8"
       '(("行う" #f "おこなu") ("行なう" "※送り位置補正" "おこなu"))
       (henkan-okuri-ari userid kvs "okonU"))

(test* "okuri ari 9"
       '(("見る" #f "みr") ("観る" "(字義:みわたす)" "みr") ("視る" "(字義:じっとみる)" "みr") ("診る" "(diagnose)" "みr"))
       (henkan-okuri-ari userid kvs "miRu"))

(test* "okuri ari 10"
       '(("見" #f "みr") ("観" "(字義:みわたす)" "みr") ("視" "(字義:じっとみる)" "みr") ("診" "(diagnose)" "みr"))
       (henkan-okuri-ari userid kvs "miR"))

;;-------------------------------------------------------------------
(test-section "henkan hiragana")

(test* "hiragana 1"
       '(("あいうえお" #f "aiueo") ("アイウエオ" #f "aiueo"))
       (henkan-hiragana kvs "aiueo"))

(test* "hiragana 2"
       '(("の" #f "no") ("ノ" #f "no"))
       (henkan-hiragana kvs "no"))

(test* "hiragana 3"
       '(("b" #f "b"))
       (henkan-hiragana kvs "b"))

(test* "hiragana 4"
       '(("if" #f "if"))
       (henkan-hiragana kvs "if"))

;;-------------------------------------------------------------------
(test-section "henkan non-kanji")

(test* "non-kanji 1"
       '(("｛" #f "{"))
       (henkan-non-kanji userid kvs "{"))

(test* "non-kanji 2"
       '(("！" #f "!") ("感嘆符" #f "!"))
       (henkan-non-kanji userid kvs "!"))

(test* "non-kanji 3"
       '(("／" #f "/") ("÷" #f "/"))
       (henkan-non-kanji userid kvs "/"))

(test* "non-kanji 4"
       '(("≠" #f "!="))
       (henkan-non-kanji userid kvs "!="))

(test* "non-kanji 5"
       '(("．" #f ".") ("・" #f ".") ("。" #f ".") ("…" "..." "."))
       (henkan-non-kanji userid kvs "."))


;;-------------------------------------------------------------------
(test-section "sekka henkan toplevel")

(test* "henkan toplevel 1"
       '(("＊" #f "*") ("※" #f "*") ("×" #f "*"))
       (sekka-henkan userid kvs "*"))

(test* "henkan toplevel 2"
       '(("しぜんげんごりか" #f "shizengengorika") ("シゼンゲンゴリカ" #f "shizengengorika") ("自然言語理解" #f "しぜんげんごりかい") ("自然言語" #f "しぜんげんご"))
       (sekka-henkan userid kvs "shizengengorika"))

(test* "henkan toplevel 3"
       '(("自然言語理解" #f "しぜんげんごりかい") ("自然言語" #f "しぜんげんご"))
       (sekka-henkan userid kvs "Shizengengorika"))

(test* "henkan toplevel 4"
       '(("変化する" #f "へんかs"))
       (sekka-henkan userid kvs "henkaSuru"))

(test* "henkan toplevel 5"
       '(("変換" #f "へんかん") ("返還" #f "へんかん") ("変化" #f "へんか") ("返歌" #f "へんか"))
       (sekka-henkan userid kvs "Henkan"))

(test* "henkan toplevel 6"
       '()
       (sekka-henkan userid kvs "HEnkan"))

(test* "henkan toplevel 7"
       '()
       (sekka-henkan userid kvs "HENkan"))

(test* "henkan toplevel 8"
       '(("コーヒー" #f "こーひー"))
       (sekka-henkan userid kvs "Ko-hi-"))

(test* "henkan toplevel 9"
       '(("得る" #f "えr") ("獲る" "NB:「とr」と同形" "えr") ("選る" "NB:「よr」「すぐr」と同形" "えr"))
       (sekka-henkan userid kvs "eRu"))

(test* "henkan toplevel 10"
       '(("得る" #f "えr") ("獲る" "NB:「とr」と同形" "えr") ("選る" "NB:「よr」「すぐr」と同形" "えr"))
       (sekka-henkan userid kvs "ERu"))

(test* "henkan toplevel 11"
       '(("を" #f "wo") ("ヲ" #f "wo") ("小" #f "を") ("緒" #f "を") ("雄" #f "を") ("男" #f "を") ("牡" #f "を") ("尾" #f "を") ("悪" #f "を") ("汚" #f "を") ("惡" "「悪」の旧字(人名用漢字)" "を"))
       (sekka-henkan userid kvs "wo"))

(test* "henkan toplevel 12"
       '()
       (sekka-henkan userid kvs "S"))

(test* "henkan toplevel 12"
       '()
       (sekka-henkan userid kvs "H"))

(test* "henkan toplevel 13"
       '()
       (sekka-henkan userid kvs "gitHuB"))

(test* "henkan toplevel 14"
       '()
       (sekka-henkan userid kvs "ChangeLog"))


(test* "henkan toplevel 15"
       '(("訳" #f "わけ") ("和気" "地名" "わけ") ("理由" "当て字" "わけ") ("分け" #f "わけ") ("分" #f "わけ") ("譯" "「訳」の旧字" "わけ") ("戯奴" #f "わけ"))
       (sekka-henkan userid kvs "Wake"))

(test* "henkan toplevel(for Elisp) 1"
       '(("＊" nil "*") ("※" nil "*") ("×" nil "*"))
       (sekkaHenkan userid kvs #f "*"))

(test* "henkan toplevel(for Elisp) 2"
       '(("しぜんげんごりか" nil "shizengengorika") ("シゼンゲンゴリカ" nil "shizengengorika") ("自然言語理解" nil "しぜんげんごりかい") ("自然言語" nil "しぜんげんご"))
       (sekkaHenkan userid kvs #f "shizengengorika"))

(test* "henkan toplevel(for Elisp) 3"
       '(("自然言語理解" nil "しぜんげんごりかい") ("自然言語" nil "しぜんげんご"))
       (sekkaHenkan userid kvs #f "Shizengengorika"))

(test* "henkan toplevel(for Elisp) 4"
       '(("変化する" nil "へんかs"))
       (sekkaHenkan userid kvs #f "henkaSuru"))

(test* "henkan toplevel(for Elisp) 5"
       '(("変換" nil "へんかん") ("返還" nil "へんかん") ("変化" nil "へんか") ("返歌" nil "へんか"))
       (sekkaHenkan userid kvs #f "Henkan"))

(test* "henkan toplevel(for Elisp) 6"
       '(("マジパネェ" nil "まじぱねぇ") ("まじパネェ" nil "まじぱねぇ") ("マジ半端ネェ" nil "まじぱねぇ") ("まじ半端ネェ" nil "まじぱねぇ"))
       (sekkaHenkan userid kvs #f "Majipanee"))

(test* "henkan toplevel(for Elisp) 7"
       '(("変換エンジン" nil "へんかんえんじん") ("変換" nil "へんかん") ("返還" nil "へんかん"))
       (sekkaHenkan userid kvs #f "Henkanenji"))

(test* "henkan toplevel(for Elisp) 8"
       '(("ブログった" nil "ぶろぐt"))
       (sekkaHenkan userid kvs #f "buroguTta"))

(test* "henkan toplevel(for Elisp) 9"
       '(("ブログりました" nil "ぶろぐt"))
       (sekkaHenkan userid kvs #f "buroguRimashita"))

(test* "henkan toplevel(for Elisp) 10"
       '(("はてブ" nil "はてぶ") ("はてなブックマーク" nil "はてぶ"))
       (sekkaHenkan userid kvs #f "Hatebu"))


;;-------------------------------------------------------------------
(test-section "henkan kakutei")
(test* "henkan kakutei(for Elisp) 1"
       '(("返還" nil "へんかん") ("変換" nil "へんかん") ("変化" nil "へんか") ("返歌" nil "へんか"))
       (begin
         (sekkaKakutei userid kvs #f "へんかん" "返還")
         (sekkaHenkan userid kvs #f "Henkan")))

(test* "DB check after henkan kakutei 1"
       "/返還/変換"
       (. (hash-table-get db (+ userid "::へんかん") #f) force_encoding "UTF-8"))

(test* "henkan kakutei(for Elisp) 2"
       '(("変換" nil "へんかん") ("返還" nil "へんかん") ("変化" nil "へんか") ("返歌" nil "へんか"))
       (begin
         (sekkaKakutei userid kvs #f "へんかん" "変換")
         (sekkaHenkan userid kvs #f "Henkan")))

(test* "DB check after henkan kakutei 2"
       "/変換/返還"
       (. (hash-table-get db (+ userid "::へんかん") #f) force_encoding "UTF-8"))

(test* "henkan kakutei(for Elisp) 3"
       '(("デベロッパ" nil "developer") ("デベロッパー" nil "developer") ("ディベロッパー" nil "developer"))
       (begin
         (sekkaKakutei userid kvs #f "developer" "デベロッパ")
         (sekkaHenkan userid kvs #f "developer")))

(test* "henkan kakutei(for Elisp) 4"
       '(("。" nil ".") ("．" nil ".") ("・" nil ".") ("…" "..." "."))
       (begin
         (sekkaKakutei userid kvs #f "." "。")
         (sekkaHenkan userid kvs #f ".")))

(test* "henkan kakutei(for Elisp) 5"
       nil
       (sekkaKakutei userid kvs #f "." "。"))

(test* "henkan kakutei(for Elisp) 6"
       nil
       (sekkaKakutei userid kvs #f "developper" "デベロッパ"))

(test* "henkan kakutei(for Elisp) 7"
       nil
       (sekkaKakutei userid kvs #f "wo" "を"))

(test* "henkan kakutei(for Elisp) 8"
       '(("はてなブックマーク" nil "はてぶ") ("はてブ" nil "はてぶ"))
       (begin
         (sekkaKakutei userid kvs #f "はてぶ" "はてなブックマーク")
         (sekkaHenkan userid kvs #f "Hatebu")))


(test* "henkan kakutei(for Elisp) 9"
       '(("．" nil ".") ("・" nil ".") ("。" nil ".") ("…" "..." "."))
       (begin
         (sekkaHenkan userid2 kvs #f ".")))                  ;; userid2

(test* "henkan kakutei(for Elisp) 10"
       '(("。" nil ".") ("．" nil ".") ("・" nil ".") ("…" "..." "."))
       (begin
         (sekkaKakutei userid2 kvs #f "." "。")              ;; userid2
         (sekkaHenkan userid2 kvs #f ".")))                  ;; userid2

(test* "henkan kakutei(for Elisp) 11"
       '(("。" nil ".") ("．" nil ".") ("・" nil ".") ("…" "..." "."))
       (begin
         (sekkaHenkan userid2 kvs #f ".")))                  ;; userid2

(test* "henkan kakutei(for Elisp) 12"
       nil
       (sekkaKakutei userid2 kvs #f "wo" "を"))              ;; userid2


;;===================================================================

;; ---後処理---
;; 最終的な辞書の状態を見たい時、dumpしてみること。
(db.close)
;;(dump-sekka-jisyo-f STDOUT target)

(test-end)
