;;-*- mode: nendo; syntax: scheme -*-
;;;
;;; jruby_mapdb.nnd - jruby_mapdbライブラリのテスト
;;;  
;;;   Copyright (c) 2017  Kiyoka Nishiyama  <kiyoka@sumibi.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: 
;;;
(require "sekka/jruby_mapdb")
(use nendo.test)
(load "./test/common.nnd")

(test-start "MapDB (only Java)")
;;===================================================================

;;-------------------------------------------------------------------
(test-section "DB access")

(define db #f)
(define tree #f)

(set! db (MapDB::DB.new "test1.mapdb" "sekka1"))
(test* "db open"
       "val1"
       (let1 tree (db.getTree)
         (tree.put "key1" "val1")
         (tree.get "key1")))
(db.close)

(set! db (MapDB::DB.new "test1.mapdb" "sekka2"))
(test* "db put & get"
       "val1val2val3"
       (begin
         (let1 tree (db.getTree)
           (tree.put "key1" "val1")
           (tree.put "key2" "val2")
           (tree.put "key3" "val3")
           (+ (tree.get "key1")
              (tree.get "key2")
              (tree.get "key3")))))
(db.close)

(set! db (MapDB::DB.new "test1.mapdb" "sekka3"))
(test* "db keys"
       '("key1" "key2" "key3" "key4")
       (begin
         (let1 tree (db.getTree)
           (tree.put "key1" "1")
           (tree.put "key2" "2")
           (tree.put "key3" "3")
           (tree.put "key4" "4")
           (to-list (tree.keys)))))

(test* "db delete"
       '("key1" "key2" "key4")
       (begin
         (let1 tree (db.getTree)
           (tree.delete "key3")
           (to-list (tree.keys)))))

(test* "db put kanji"
       "まじぱねぇ /マジパネェ/"
       (begin
         (let1 tree (db.getTree)
           (tree.put "M:i;chi" "Cいっち")
           (tree.get "M:i;chi")
           (tree.put "M:かに" "/蟹/可児/蠏")
           (tree.get "M:かに")
           (tree.put "dummy:(stored)" "まじぱねぇ /マジパネェ/")
           (tree.get "dummy:(stored)")
           )))
       
(db.close)

;;===================================================================


(test-end)
