:; #-*- mode: nendo; syntax: scheme -*-;;
;;
;;      石火変換ライブラリ
;;
(require "kyotocabinet")
(require "amatch")
(require "./lib/keywordlist")
 

(define (jaro str1 str2)
  (. (Amatch::Jaro.new str1) match str2))

(define (jarow str1 str2)
  (. (Amatch::JaroWinkler.new str1) match str2))

(define (paird str1 str2)
  (. (Amatch::PairDistance.new str1) match str2))


(define (string-drop str n)
  (or (str.slice n (str.size))
      ""))

;; 曖昧検索
;;  リストで返す。 (検索範囲件数 ソート済み検索結果)
(define (approximate-search db keyword regexp)
  (define jarow-shikii 0.94)
  (let* ((util (SekkaRubyUtil.new))
         (keyword-list (util.get_search_keyword_list db keyword regexp))
         (lst  (filter-map
                (lambda (k)
                  (let (
                        (_jarow (jarow keyword k))
                        (_jaro  (jaro  keyword k))
                        (_paird (paird keyword k)))
                    (when (< jarow-shikii _jarow)
                      (let1 v (hash-table-get db k)
                        (list
                         _jarow k v
                         _jaro _paird
                         )))))
                keyword-list))
         (sorted-lst  (sort-by lst (lambda (item) (- 1.0 (car item))))))
    (list (length keyword-list)
          sorted-lst)))


;; split "/a/b/c/" into '("a" "b" "c") list
(define (split-henkan-kouho str)
  (let1 trimmed (cond
                 ((rxmatch #/^[\/](.+)[\/]$/ str)
                  => (lambda (m)
                       (rxmatch-substring m 1)))
                 (else
                  (errorf "split-henkan-kouho requires /a/b/c/ format string")))
    (to-list (trimmed.split "/"))))


;; 送り仮名なしの変換
(define (henkan-okuri-nashi db keyword)
  (let* ((result (approximate-search db keyword #/[a-z]$/))
         (kouho  (uniq (map
                        (lambda (x)
                          (third x))
                        (second result)))))
    (append-map
     (lambda (value)
       (split-henkan-kouho
        (if (rxmatch #/^C/ value)
            (hash-table-get db (string-drop value 1)) ;; continue
            value)))
     kouho)))

;; keyword には ローマ字のみを受け付ける
(define (sekka-henkan db keyword)
  ;; キーワードの種別で処理を分割する
  (cond
   ((rxmatch #/[A-Z]/ keyword)
    (cond
     ((rxmatch #/[A-Z]/ (keyword.slice 1 keyword.size))
      ;; 送りあり
      (henkan-okuri-ari db keyword))
     (else
      ;; 送りなし
      (henkan-okuri-nashi db keyword))))
   (else
    (henkan-non-kanji db keyword))))


