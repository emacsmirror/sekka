:; #-*- mode: nendo; syntax: scheme -*-;;
;;
;;      石火変換ライブラリ
;;
(use srfi-1)
(require "kyotocabinet")
(require "amatch")
(load "./lib/roman-lib.nnd")
(require "./lib/approximatesearch")

(define (string-drop str n)
  (or (str.slice n (str.size))
      ""))

;; 曖昧検索
;;  リストで返す。 (ソート済み検索結果)
(define (approximate-search db keyword okuri-ari-flag)
  (define jarow-shikii 0.94)
  (let* ((a-search (ApproximateSearch.new jarow-shikii))
         (lst      (map
                    (lambda (x)
                      (let* ((val (vector-ref x 0))
                             (k   (vector-ref x 1))
                             (v   (hash-table-get db k)))
                        (list val k v)))
                    (to-list (a-search.search db keyword okuri-ari-flag))))
         (sorted-lst  (sort-by lst (lambda (item) (- 1.0 (car item))))))
    sorted-lst))


;; 厳密検索
(define (exact-search db keyword)
  (let1 v (hash-table-get db keyword #f)
    (if v
        `((1.0 ,keyword ,v))
        '())))


;; split "/a;annotation/b/c/" into `(("a" "annotation" ,src) ("b" #f ,src) ("c" #f ,src))  alist
(define (split-henkan-kouho str src . okuri)
  (let* ((trimmed (cond
                   ((rxmatch #/^[\/](.+)[\/]?$/ str)
                    => (lambda (m)
                         (rxmatch-substring m 1)))
                   (else
                    (errorf "split-henkan-kouho got [%s]. it requires /a/b/c/ format string" str))))
         (splitted (to-list (trimmed.split "/")))
         (okuri    (get-optional okuri "")))
    ;; pickup annotation
    (map
     (lambda (entry)
       (let1 vec (entry.split ";")
         (list (+ (vector-ref vec 0) okuri)
               (vector-ref vec 1 #f)
               src)))
     splitted)))


;; 送り仮名なしの変換
(define (henkan-okuri-nashi db keyword)
  (let* ((result (approximate-search db keyword #f))
         (kouho  (uniq (map
                        (lambda (x)
                          (third x))
                        result))))
    (append-map
     (lambda (value)
       (if-let1 m (rxmatch #/^C(.+)$/ value)
         (split-henkan-kouho
          (hash-table-get db (string-drop value 1))
          (rxmatch-substring m 1)
          ) ;; continue to fetch
         (split-henkan-kouho
          value
          keyword)))
     kouho)))


;; 送り仮名ありの変換
(define (henkan-okuri-ari db keyword)
  (let1 m (rxmatch #/^([a-zA-Z])([a-z\-^]+)([A-Z])([a-zA-Z]*)$/ keyword)
    (if (not m)
        (errorf "henkan-okuri-ari: requires xxxxZx or ZxxxxZx ascii format.  got:[%s] " keyword)
        (let* ((result (approximate-search db
                                           (+ (. (rxmatch-substring m 1) downcase)
                                              (rxmatch-substring m 2)
                                              (rxmatch-substring m 3))
                                           #t))
               (okurigana  (gen-roman->hiragana (. (+
                                                    (rxmatch-substring m 3)
                                                    (rxmatch-substring m 4)) downcase)))
               (kouho      (uniq (map
                                  (lambda (x)
                                    (third x))
                                  result))))
          (append-map
           (lambda (value)
             (if-let1 m (rxmatch #/^C(.+)$/ value)
               (split-henkan-kouho
                (hash-table-get db (string-drop value 1))
                (rxmatch-substring m 1)
                okurigana) ;; continue to fetch
               (split-henkan-kouho value keyword okurigana)))
           kouho)))))


;; 平仮名の変換
(define (henkan-hiragana db keyword)
  (let* ((str  (keyword.downcase))
         (hira (gen-roman->hiragana str))
         (kata (gen-roman->katakana str)))
    (if hira
        `(
          ( ,hira #f ,keyword)
          ( ,kata #f ,keyword))
        `((,keyword #f ,keyword)))))


;; 記号を含むキーワードの変換
(define (henkan-non-kanji db keyword)
  (let* ((result (exact-search db keyword))
         (kouho  (map
                  (lambda (x)
                    (third x))
                  result)))
    (append-map
     (lambda (value)
       (split-henkan-kouho value keyword))
     kouho)))


;; keyword には ローマ字のみを受け付ける
(define (sekka-henkan db keyword)
  ;; キーワードの種別で処理を分割する
  (cond
   ((rxmatch #/[A-Z]/ keyword)
    (cond
     ((rxmatch #/[a-z][A-Z]/ keyword)
      ;; 送りあり
      ;;(let1 result (approximate-search db keyword #t)  (disp-search-result result))
      (henkan-okuri-ari db keyword))
     (else
      ;; 送りなし
      ;;(let1 result (approximate-search db keyword #f)  (disp-search-result result))
      (henkan-okuri-nashi db keyword))))
   ((gen-roman->hiragana keyword)
    (henkan-hiragana db keyword))
   (else
    (henkan-non-kanji db keyword))))
;; conversion #f => nil for EmacsLisp
(define (sekkaHenkan db keyword)
  (map
   (lambda (x)
     (map (lambda (val) (if val val nil)) x))
   (sekka-henkan db keyword)))
;; Export to Ruby world
(export-to-ruby sekkaHenkan)


;; 確定処理: 最終確定語を変換候補の先頭に持ってくる。
;;  key   ... "developer" や "へんかん" など、変換候補レコードのキーとなる文字列
;;  tango ... "変換" など、変換候補から最終確定した、変換候補の文字列
;;  登録失敗したら nil を返す
(define (sekkaKakutei db key tango)
  (define (fetch db key)
    (hash-table-get db key #f))

  (define (overwrite db key value)
    (hash-table-put! db key value))

  (define (join-henkan-kouho lst)
    (+ "/"
       (string-join
        (map
         (lambda (x)
           (if (second x)
               (+ (first x) ";" (second x))
               (first x)))
         lst)
        "/")
       "/"))

  (if-let1 kouho-str (fetch db key)
    (let* ((kouho-lst (split-henkan-kouho kouho-str key))
           (no1
            (filter (lambda (x)
                      (eq? (car x) tango))
                    kouho-lst))
           (other
            (filter (lambda (x)
                      (not (eq? (car x) tango)))
                    kouho-lst)))
      (overwrite db key
                 (join-henkan-kouho (append no1 other)))
      tango)
    nil))
;; Export to Ruby world
(export-to-ruby sekkaKakutei)
