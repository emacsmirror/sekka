:; #-*- mode: nendo; syntax: scheme -*-;;

(use srfi-1)
(require "./lib/kvs")
(load "./lib/util.nnd")

(define alphabet-string "abcdefghijklmnopqrstuvwxyz>")
(define alphabet-lower-list (to-list (alphabet-string.split "")))
(define alphabet-upper-list (to-list (alphabet-string.upcase.split "")))
(define alphabet-pairs (append-map
                        (lambda (a)
                          (map
                           (lambda (b)
                             (+ a b))
                           (append alphabet-upper-list alphabet-lower-list)))
                        alphabet-lower-list))

;; KVS type setting
(define *kvs-type* 'kyotocabinet)  ;; default
(define (set-kvs-type type)
  (if (not (symbol? type))
      (error "Error: set-kvs-type requires symbol argument.")
      (set! *kvs-type* type)))
(define (get-kvs-type)
  *kvs-type*)


(define (create-2char-hash keylist)
  (define okuri-ari-hash   (make-hash-table))
  (define okuri-nashi-hash (make-hash-table))
  (define (create-hash keylist)
    (for-each
     (lambda (k)
       (when (rxmatch #/^[a-zA-Z^>-]+$/ k)
         (let1 sliced (k.slice 0 2)
           (when (= 2 sliced.size)
             (if (rxmatch #/[A-Z]$/ k)
                 (hash-table-push! okuri-ari-hash   sliced k)
                 (hash-table-push! okuri-nashi-hash sliced k))))))
     keylist))
  (create-hash keylist)
  (values okuri-ari-hash
          okuri-nashi-hash))

(define (setup-ready-made-keylist kvs keylist)
  (for-each
   (lambda (key)
     (unless (kvs.get key #f)
       (kvs.put! key "")))
   alphabet-pairs)
  
  (receive (okuri-ari-hash
            okuri-nashi-hash)
      (create-2char-hash keylist)

    ;; OKURI-ARI
    (for-each
     (lambda (key)
       (kvs.put! (+ "(" key.upcase ")")
                 (string-join (uniq (sort (hash-table-get okuri-ari-hash key))) " ")))
     (hash-table-keys okuri-ari-hash))

    ;; OKURI-NASHI
    (for-each
     (lambda (key)
       (kvs.put! (+ "(" key.downcase ")")
                 (string-join (uniq (sort (hash-table-get okuri-nashi-hash key))) " ")))
     (hash-table-keys okuri-nashi-hash))))


(define (append-entry kvs key value)
  (if-let1 got (kvs.get key #f)
    (let* ((first1 (car (string-split-first-and-rest got)))
           (trimmed-a (if-let1 m (rxmatch #/^[C\/](.+)$/ got)
                        (rxmatch-substring m 1)
                        got))
           (trimmed-b (if-let1 m (rxmatch #/^[C\/](.+)$/ value)
                        (rxmatch-substring m 1)
                        value))
           (lst (delete-duplicates (append (to-list (trimmed-a.split "/"))
                                           (to-list (trimmed-b.split "/"))))))
      (if (= trimmed-a trimmed-b)
          (kvs.put! key value)
          (kvs.put! key (+ first1 (string-join lst "/")))))
    (kvs.put! key value)))


(define (load-sekka-jisyo-f f filename)
  (define keylist '())
  (define (create-keylist kvs lines)
    (for-each
     (lambda (line)
       (let1 fields (to-list (line.split " "))
         (set! keylist (cons (first fields) keylist))
         (append-entry kvs (first fields) (second fields))))
     lines))
  (let1 kvs (Kvs.new *kvs-type*)
    (kvs.open filename)
    (kvs.clear)
    (create-keylist kvs (f.readlines.to_list))
    (setup-ready-made-keylist kvs keylist)
    (kvs.close)))


(define (dump-sekka-jisyo-f f filename)
  (let1 kvs (Kvs.new *kvs-type*)
    (kvs.open filename)
    (for-each
     (lambda (key)
       (f.puts (+ key " " (kvs.get key))))
     (to-list (kvs.keys)))
    (kvs.close)))


(define (openSekkaJisyo filename)
  (let1 kvs (Kvs.new *kvs-type*)
    (kvs.open filename)
    kvs))

;; Export to Ruby world
(export-to-ruby openSekkaJisyo)
