:; #-*- mode: nendo; syntax: scheme -*-;;

(use srfi-1)
(require "./lib/kvs")
(load "./lib/util.nnd")

(define masterid "MASTER")
(define workid   "WORK")

(define alphabet-string "abcdefghijklmnopqrstuvwxyz>@;")
(define alphabet-lower-list (to-list (alphabet-string.split "")))
(define alphabet-upper-list (to-list (. (sekka-upcase alphabet-string) split "")))
(define alphabet-pairs (append-map
                        (lambda (a)
                          (map
                           (lambda (b)
                             (+ a b))
                           (append alphabet-upper-list alphabet-lower-list)))
                        alphabet-lower-list))

;; KVS type setting
(define *kvs-type* 'tokyocabinet)  ;; default
(define (set-kvs-type type)
  (if (not (symbol? type))
      (error "Error: set-kvs-type requires symbol argument.")
      (set! *kvs-type* type)))
(define (get-kvs-type)  *kvs-type*)


;; dict-get search sequence
;;   (1) try "userid::keyword" key
;;   (2) try "MASTER::keyword" key
(define (dict-get userid kvs key . fallback)
  (if-let1 value
      (or (kvs.get (+ userid "::" key) #f)
          (kvs.get (+ masterid "::" key) #f))
    value
    (let1 opt (get-optional fallback #f)
      opt)))

(define (create-2char-hash keylist)
  (define okuri-ari-hash   (make-hash-table))
  (define okuri-nashi-hash (make-hash-table))
  (define (create-hash keylist)
    (for-each
     (lambda (k)
       (when (rxmatch #/^[a-zA-Z^>-@`;+]+$/ k)
         (let1 sliced (sekka-downcase (k.slice 0 2))
           (when (= 2 sliced.size)
             (if (rxmatch #/[A-Z`+]$/ k)
                 (hash-table-push! okuri-ari-hash   sliced k)
                 (hash-table-push! okuri-nashi-hash sliced k))))))
     keylist))
  (create-hash keylist)
  (values okuri-ari-hash
          okuri-nashi-hash))

(define (setup-ready-made-keylist kvs keylist)
  (for-each
   (lambda (key)
     (let1 key (+ masterid "::" key)
       (unless (kvs.get key #f)
         (kvs.put! key ""))))
   alphabet-pairs)
  
  (receive (okuri-ari-hash
            okuri-nashi-hash)
      (create-2char-hash keylist)

    ;; OKURI-ARI
    (for-each
     (lambda (key)
       (kvs.put! (+ masterid "::" "(" (sekka-upcase key) ")")
                 (string-join (uniq (sort (hash-table-get okuri-ari-hash key))) " ")))
     (hash-table-keys okuri-ari-hash))

    ;; OKURI-NASHI
    (for-each
     (lambda (key)
       (kvs.put! (+ masterid "::" "(" (sekka-downcase key) ")")
                 (string-join (uniq (sort (hash-table-get okuri-nashi-hash key))) " ")))
     (hash-table-keys okuri-nashi-hash))))


(define (append-entry userid kvs key value)
  (let1 key (+ userid "::" key)
    (if-let1 got (kvs.get key #f)
      (let* ((trimmed-a-first1 (car (string-split-first-and-rest  got)))
             (trimmed-a        (if-let1 m (rxmatch #/^[C\/](.+)$/ got)
                                 (rxmatch-substring m 1)
                                 got))
             (trimmed-b-first1 (car (string-split-first-and-rest  value)))
             (trimmed-b        (if-let1 m (rxmatch #/^[C\/](.+)$/ value)
                                 (rxmatch-substring m 1)
                                 value))
             (lst (delete-duplicates (append (to-list (trimmed-a.split "/"))
                                             (to-list (trimmed-b.split "/"))))))
        (if (= trimmed-a-first1 trimmed-b-first1)
            (kvs.put! key (+ trimmed-a-first1 (string-join lst "/")))
            (begin
              ;; "/" よりも "C" を優先する
              (cond
               ((= "C" trimmed-a-first1) ;; aを優先
                (kvs.put! key got))
               ((= "C" trimmed-b-first1) ;; bを優先
                (kvs.put! key value))
               (else
                (errorf "Error: [%s] entry is wrong format" value))))))
      (kvs.put! key value))))


(define (load-sekka-jisyo-f f filename)
  (define keylist '())
  (define (create-keylist kvs lines)
    (for-each
     (lambda (line)
       (let1 fields (split-dict-line line)
         (set! keylist (cons (first fields) keylist))
         (append-entry masterid kvs (first fields) (second fields))))
     lines))
  (let1 kvs (Kvs.new (get-kvs-type))
    (kvs.open filename)
    (kvs.clear)
    (create-keylist kvs (f.readlines.to_list))
    (setup-ready-made-keylist kvs keylist)
    (kvs.close)))


(define (dump-sekka-jisyo-f f filename)
  (let1 kvs (Kvs.new (get-kvs-type))
    (kvs.open filename)
    (for-each
     (lambda (key)
       (f.puts (+ key " " (kvs.get key))))
     (to-list (kvs.keys)))
    (kvs.close)))


(define (openSekkaJisyo dictSource cacheSource)
  (when (not (rxmatch #/tch$/ dictSource))
    (set-kvs-type 'memcache))
  (let1 kvs   (Kvs.new (get-kvs-type))
    (kvs.open     #?=dictSource)
    (let1 cachesv (if cacheSource
                      (let1 obj (Kvs.new 'memcache)
                        (obj.open cacheSource)
                        obj)
                      #f)
      (to-arr (list kvs cachesv)))))
;; Export to Ruby world
(export-to-ruby openSekkaJisyo)
