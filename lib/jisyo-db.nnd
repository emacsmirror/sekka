:; #-*- mode: nendo; syntax: scheme -*-;;

(use srfi-1)
(require "kyotocabinet")

(define alphabet-list (to-list (. "abcdefghijklmnopqrstuvwxyz>" split "")))
(define alphabet-pairs (append-map
                        (lambda (a)
                          (map
                           (lambda (b)
                             (+ a b))
                           alphabet-list))
                        alphabet-list))

(define (setup-ready-made-keylist db)
  (for-each
   (lambda (key)
     (unless (hash-table-get db key #f)
       (hash-table-put! db key "")))
   alphabet-pairs)
  
  (let1 cur (db.cursor)
    (for-each
     (lambda (ab)
       (let ((lst-okuri-nashi '())
             (lst-okuri-ari   '()))
         (cur.jump ab)
         (let loop ((k (cur.get_key)))
           (let1 k2 (k.slice 0 2)
             (if (and (cur.step)
                      (eq? ab k2))
                 (begin
                   (if (rxmatch #/[A-Z]$/ k)
                       (set! lst-okuri-ari   (cons k lst-okuri-ari))
                       (set! lst-okuri-nashi (cons k lst-okuri-nashi)))
                   (loop (cur.get_key))))))
         (hash-table-put! db
                          (+ "(" ab.upcase ")")
                          (string-join (reverse lst-okuri-ari) " "))
         (hash-table-put! db
                          (+ "(" ab        ")")
                          (string-join #?=(reverse lst-okuri-nashi) " "))))
     alphabet-pairs)
    (cur.disable)))


(define (load-sekka-jisyo-f f basename)
  (define cabinet-ext ".kct")
  (let1 err
      (KyotoCabinet::DB.process
       (+ basename cabinet-ext)
       (&block (db)
         (db.tune_encoding   "utf-8")
         (begin
           (for-each
            (lambda (line)
              (let1 fields (to-list (line.split " "))
                (hash-table-put! db
                                 (first fields)
                                 (second fields))))
            (f.readlines.to_list))
           (setup-ready-made-keylist db))))
    (when err
      (printf "db error [%s]\n" err)
      (exit 1))
    #t))



      



