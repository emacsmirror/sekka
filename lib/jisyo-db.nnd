:; #-*- mode: nendo; syntax: scheme -*-;;

(use srfi-1)
(require "kyotocabinet")
(load "./lib/util.nnd")

(define cabinet-ext ".kct")

(define alphabet-string "abcdefghijklmnopqrstuvwxyz>")
(define alphabet-lower-list (to-list (alphabet-string.split "")))
(define alphabet-upper-list (to-list (alphabet-string.upcase.split "")))
(define alphabet-pairs (append-map
                        (lambda (a)
                          (map
                           (lambda (b)
                             (+ a b))
                           (append alphabet-upper-list alphabet-lower-list)))
                        alphabet-lower-list))

(define (setup-ready-made-keylist db)
  (letrec ((lst-okuri-nashi '())
           (lst-okuri-ari   '())
           (create-lst-with-cursor!
            (lambda (cur ab)
              (let loop ((k (cur.get_key)))
                (let1 k2 (k.slice 0 2)
                  (if (and (cur.step)
                           (eq? ab k2))
                      (begin
                        (if (rxmatch #/[A-Z]$/ k)
                            (set! lst-okuri-ari   (cons k lst-okuri-ari))
                            (set! lst-okuri-nashi (cons k lst-okuri-nashi)))
                        (loop (cur.get_key)))))))))

    (for-each
     (lambda (key)
       (unless (hash-table-get db key #f)
         (hash-table-put! db key "")))
     alphabet-pairs)
  
    (let1 cur (db.cursor)
      (for-each
       (lambda (ab)
         (set! lst-okuri-nashi '())
         (set! lst-okuri-ari   '())
         (cur.jump ab)
         (create-lst-with-cursor! cur ab)
         (let ((fetched-okuri-ari   (hash-table-get db (+ "(" ab.upcase ")") ""))
               (fetched-okuri-nashi (hash-table-get db (+ "(" ab.upcase ")") "")))
           (hash-table-put! db
                            (+ "(" ab.upcase ")")
                            (+ fetched-okuri-ari   " " (string-join (reverse lst-okuri-ari) " ")))
           (hash-table-put! db
                            (+ "(" ab.downcase ")")
                            (+ fetched-okuri-nashi " " (string-join (reverse lst-okuri-nashi) " ")))))
       alphabet-pairs)
      (cur.disable))))


(define (load-sekka-jisyo-f f basename)
  (let1 err
      (KyotoCabinet::DB.process
       (+ basename cabinet-ext)
       (&block (db)
         (db.tune_encoding   "utf-8")
         (db.clear)
         (begin
           (for-each
            (lambda (line)
              (let1 fields (to-list (line.split " "))
                (hash-table-put! db
                                 (first fields)
                                 (if-let1 curval (hash-table-get db (first fields) #f)
                                   (+ curval "/" (if-let1 m (rxmatch #/^[C\/](.+)$/ (second fields))
                                                   (rxmatch-substring m 1)
                                                   (second fields)))
                                   (second fields)))))
            (f.readlines.to_list))
           (setup-ready-made-keylist db))))
    (when err
      (printf "db error [%s]\n" err)
      (exit 1))
    #t))


(define (dump-sekka-jisyo-f f basename)
  (let1 err
      (KyotoCabinet::DB.process
       (+ basename cabinet-ext)
       (&block (db)
         (db.tune_encoding   "utf-8")
         (db.each
          (&block (key value)
            (f.puts (+ key " " value))))))
    (when err
      (printf "db error [%s]\n" err)
      (exit 1))
    #t))


(define (openSekkaJisyo basename)
  (let1 db (KyotoCabinet::DB.new)
    (when (not (db.open (+ basename cabinet-ext)))
      (errorf "db error [%s]\n" (db.error)))
    (db.tune_encoding   "utf-8")
    db))
;; Export to Ruby world
(export-to-ruby openSekkaJisyo)
