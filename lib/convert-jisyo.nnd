:; #-*- mode: nendo; syntax: scheme -*-;;

(use srfi-1)

;; このテーブルはruby-romkan から変換し、一部不足を追加した。
;;  クンレイ、日本式、ヘボン式もデータ中に併記し全てを網羅している。
(define sekka-kana->roman-table
  (map
   (lambda (x)
     (let1 r (string->regexp (+ "^" (first x)))
       (cons r
             x)))
   (sort-by
    '(
      ("ぁ"        "xa" "la")
      ("あ"        "a")
      ("ぃ"        "xi" "li")
      ("い"        "i")
      ("ぅ"        "xu" "lu")
      ("う"        "u")
      ("う゛"      "vu")
      ("う゛ぁ"    "va")
      ("う゛ぃ"    "vi")
      ("う゛ぇ"    "ve")
      ("う゛ぉ"    "vo")
      ("ぇ"        "xe" "le")
      ("え"        "e")
      ("ぉ"        "xo" "lo")
      ("お"        "o")
      ("か"        "ka" "ca")
      ("が"        "ga")
      ("き"        "ki" "ci")
      ("きゃ"      "kya")
      ("きゅ"      "kyu")
      ("きょ"      "kyo")
      ("ぎ"        "gi")
      ("ぎゃ"      "gya")
      ("ぎゅ"      "gyu")
      ("ぎょ"      "gyo")
      ("く"        "ku" "cu")
      ("ぐ"        "gu")
      ("け"        "ke" "ce")
      ("げ"        "ge")
      ("こ"        "ko" "co")
      ("ご"        "go")
      ("さ"        "sa")
      ("ざ"        "za")
      ("し"        "shi" "si")
      ("しゃ"      "sha" "sya")
      ("しゅ"      "shu" "syu") ;; hu の例外処理: shu は sfu になってはいけない
      ("しぇ"      "she" "sye")
      ("しょ"      "sho" "syo")
      ("じ"        "ji" "zi")
      ("じゃ"      "ja" "jya")
      ("じゅ"      "ju" "jyu")
      ("じぇ"      "je" "jye")
      ("じょ"      "jo" "jyo")
      ("す"        "su")
      ("ず"        "zu")
      ("せ"        "se")
      ("ぜ"        "ze")
      ("そ"        "so")
      ("ぞ"        "zo")
      ("た"        "ta")
      ("だ"        "da")
      ("ち"        "chi" "ti" "tyi")
      ("ちゃ"      "cha" "tya")
      ("ちゅ"      "chu" "tyu") ;; hu の例外処理: chu は cfu になってはいけない
      ("ちぇ"      "che" "tye")
      ("ちょ"      "cho" "tyo")
      ("ぢ"        "di")
      ("ぢゃ"      "dya")
      ("ぢゅ"      "dyu")
      ("ぢぇ"      "dye")
      ("ぢょ"      "dyo")
      ("っ"        "tt" "xtu" "xtsu")
      ("っう゛"    "vvu")
      ("っう゛ぁ"  "vva")
      ("っう゛ぃ"  "vvi")
      ("っう゛ぇ"  "vve")
      ("っう゛ぉ"  "vvo")
      ("っか"      "kka")
      ("っが"      "gga")
      ("っき"      "kki")
      ("っきゃ"    "kkya")
      ("っきゅ"    "kkyu")
      ("っきょ"    "kkyo")
      ("っぎ"      "ggi")
      ("っぎゃ"    "ggya")
      ("っぎゅ"    "ggyu")
      ("っぎょ"    "ggyo")
      ("っく"      "kku")
      ("っぐ"      "ggu")
      ("っけ"      "kke")
      ("っげ"      "gge")
      ("っこ"      "kko")
      ("っご"      "ggo")
      ("っさ"      "ssa")
      ("っざ"      "zza")
      ("っし"      "sshi")
      ("っしゃ"    "ssha")
      ("っしゅ"    "sshu")
      ("っしぇ"    "sshe")
      ("っしょ"    "ssho")
      ("っじ"      "jji")
      ("っじゃ"    "jja")
      ("っじゅ"    "jju")
      ("っじぇ"    "jje")
      ("っじょ"    "jjo")
      ("っす"      "ssu")
      ("っず"      "zzu")
      ("っせ"      "sse")
      ("っぜ"      "zze")
      ("っそ"      "sso")
      ("っぞ"      "zzo")
      ("った"      "tta")
      ("っだ"      "dda")
      ("っち"      "cchi" "ttyi")
      ("っちゃ"    "ccha" "ttya")
      ("っちゅ"    "cchu" "ttyu")
      ("っちぇ"    "cche" "ttye")
      ("っちょ"    "ccho" "ttyo")
      ("っぢ"      "ddi")
      ("っぢゃ"    "ddya")
      ("っぢゅ"    "ddyu")
      ("っぢぇ"    "ddye")
      ("っぢょ"    "ddyo")
      ("っつ"      "ttsu")
      ("っづ"      "ddu")
      ("って"      "tte")
      ("っで"      "dde")
      ("っと"      "tto")
      ("っど"      "ddo")
      ("っは"      "hha")
      ("っば"      "bba")
      ("っぱ"      "ppa")
      ("っひ"      "hhi")
      ("っひゃ"    "hhya")
      ("っひゅ"    "hhyu")
      ("っひょ"    "hhyo")
      ("っび"      "bbi")
      ("っびゃ"    "bbya")
      ("っびゅ"    "bbyu")
      ("っびょ"    "bbyo")
      ("っぴ"      "ppi")
      ("っぴゃ"    "ppya")
      ("っぴゅ"    "ppyu")
      ("っぴょ"    "ppyo")
      ("っふ"      "ffu" "hhu")
      ("っふぁ"    "ffa")
      ("っふぃ"    "ffi")
      ("っふぇ"    "ffe")
      ("っふぉ"    "ffo")
      ("っぶ"      "bbu")
      ("っぷ"      "ppu")
      ("っへ"      "hhe")
      ("っべ"      "bbe")
      ("っぺ"      "ppe")
      ("っほ"      "hho")
      ("っぼ"      "bbo")
      ("っぽ"      "ppo")
      ("っや"      "yya")
      ("っゆ"      "yyu")
      ("っよ"      "yyo")
      ("っら"      "rra")
      ("っり"      "rri")
      ("っりゃ"    "rrya")
      ("っりゅ"    "rryu")
      ("っりょ"    "rryo")
      ("っる"      "rru")
      ("っれ"      "rre")
      ("っろ"      "rro")
      ("つ"        "tsu" "tu")
      ("づ"        "du")
      ("て"        "te")
      ("で"        "de")
      ("と"        "to")
      ("ど"        "do")
      ("な"        "na")
      ("に"        "ni")
      ("にゃ"      "nya")
      ("にゅ"      "nyu")
      ("にょ"      "nyo")
      ("ぬ"        "nu")
      ("ね"        "ne")
      ("の"        "no")
      ("は"        "ha")
      ("ば"        "ba")
      ("ぱ"        "pa")
      ("ひ"        "hi")
      ("ひゃ"      "hya")
      ("ひゅ"      "hyu")
      ("ひょ"      "hyo")
      ("び"        "bi")
      ("びゃ"      "bya")
      ("びゅ"      "byu")
      ("びょ"      "byo")
      ("ぴ"        "pi")
      ("ぴゃ"      "pya")
      ("ぴゅ"      "pyu")
      ("ぴょ"      "pyo")
      ("ふ"        "fu" "hu")
      ("ふぁ"      "fa")
      ("ふぃ"      "fi")
      ("ふぇ"      "fe")
      ("ふぉ"      "fo")
      ("ぶ"        "bu")
      ("ぷ"        "pu")
      ("へ"        "he")
      ("べ"        "be")
      ("ぺ"        "pe")
      ("ほ"        "ho")
      ("ぼ"        "bo")
      ("ぽ"        "po")
      ("ま"        "ma")
      ("み"        "mi")
      ("みゃ"      "mya")
      ("みゅ"      "myu")
      ("みょ"      "myo")
      ("む"        "mu")
      ("め"        "me")
      ("も"        "mo")
      ("ゃ"        "xya")
      ("や"        "ya")
      ("ゅ"        "xyu")
      ("ゆ"        "yu")
      ("ょ"        "xyo")
      ("よ"        "yo")
      ("ら"        "ra")
      ("り"        "ri")
      ("りゃ"      "rya")
      ("りゅ"      "ryu")
      ("りょ"      "ryo")
      ("る"        "ru")
      ("れ"        "re")
      ("ろ"        "ro")
      ("ゎ"        "xwa")
      ("わ"        "wa")
      ("ゐ"        "wi")
      ("ゑ"        "we")
      ("を"        "wo")
      ("ん"        "n" "nn" "n'")
      ("でぃ"      "dyi" "dhi")
      ("っでぃ"    "ddyi" "ddhi")
      ("ー"        "-" "^")

      ;; Ruby romkanからの不足分追加
      ("てぃ"     "thi")
      )
    (lambda (item)
      (let1 k (car item)
        (- k.size))))))


(define (gen-hiragana->roman-pattens hiragana)
  (let1 result '()
    (let loop ((str hiragana))
      (let* ((entry
              (car
               (filter
                (lambda (x)
                  (rxmatch (first x) str))
                sekka-kana->roman-table)))
             (match-str (second entry))
             (len (match-str.size))
             (kouho (cddr entry))
             (rest-str (str.slice (match-str.size) (str.size))))
        (set! result
              (cons kouho result))
        (when (< 0 (rest-str.size))
          (loop rest-str))))
    (reverse result)))


;; This function port from Gauche-0.9's util.combinations.
(define (cartesian-product lol)
  (if (null? lol)
      (list '())
      (let ((l (car lol))
            (rest (cartesian-product (cdr lol))))
        (append-map
         (lambda (x)
           (map (lambda (sub-prod) (cons x sub-prod)) rest))
         l))))


(define (patterns->roman-list patterns)
  (map
   (lambda (x)
     (string-join x))
   (cartesian-product patterns)))
  

(define (gen-hiragana->roman-list hiragana)
  (patterns->roman-list 
   (gen-hiragana->roman-pattens hiragana)))


(define (expand-okuri-nashi-entry key value)
  (let1 roman-list (gen-hiragana->roman-list key)
    (append
     (map
      (lambda (x)
        (cons x (+ "C" key)))
      roman-list)
     (list (cons key value)))))


(define (expand-okuri-ari-entry key okuri value)
  (let1 roman-list (gen-hiragana->roman-list key)
    (append
     (map
      (lambda (x)
        (cons (+ x okuri.upcase) (+ "C" key okuri)))
      roman-list)
     (list (cons (+ key okuri) value)))))


(define (convert-skk-jisyo-f f)
  (let* ((lines
          (map
           (lambda (line)
             (line.chomp))
           (f.readlines.to_list)))
         (entry-list
          (filter-map
           (lambda (line)
             (let1 fields (to-list (line.split " "))
               (cond
                ((rxmatch #/^\;/ line)
                 ;; コメント行
                 #f
                 )
                ((rxmatch #/^[あ-ん]+$/ (first fields))
                 ;; 送り仮名なしデータ
                 (expand-okuri-nashi-entry (first fields) (second fields)))
                ((rxmatch #/^([あ-ん]+)([a-z])$/ (first fields))
                 => (lambda (m)
                      ;; 送り仮名ありデータ
                      (expand-okuri-ari-entry (rxmatch-substring m 1)
                                              (rxmatch-substring m 2)
                                              (second fields))))
                (else
                 #f))))
           lines)))
    (map
     (lambda (entry)
       (sprintf "%s %s" (car entry) (cdr entry)))
     (apply append entry-list))))

       
