:; #-*- mode: nendo; syntax: scheme -*-;;

(use srfi-1)

;; 子音が1音だけ入ったテーブル
;; このテーブルはruby-romkan から変換し、一部不足を追加した。
;;  クンレイ、日本式、ヘボン式もデータ中に併記し全てを網羅している。
(define sekka-kana->roman-alist-short
  '(
    ;; normal roman                                ---AZIK---
    ("ぁ"        "xa"                                "la")
    ("あ"        "a")
    ("ぃ"        "xi"                                "li")
    ("い"        "i")
    ("ぅ"        "xu"                                "lu")
    ("う"        "u")
    ("う゛"      "vu")
    ("う゛ぁ"    "va")
    ("う゛ぃ"    "vi")
    ("う゛ぇ"    "ve")
    ("う゛ぉ"    "vo")
    ("ぇ"        "xe"                                "le")
    ("え"        "e")
    ("ぉ"        "xo"                                "lo")
    ("お"        "o")
    ("か"        "ka"                                "ca")
    ("が"        "ga")
    ("き"        "ki"                                "ci")
    ("きゃ"      "kya")
    ("きゅ"      "kyu")
    ("きょ"      "kyo")
    ("ぎ"        "gi")
    ("ぎゃ"      "gya")
    ("ぎゅ"      "gyu")
    ("ぎょ"      "gyo")
    ("く"        "ku" "cu")
    ("ぐ"        "gu")
    ("け"        "ke" "ce")
    ("げ"        "ge")
    ("こ"        "ko" "co")
    ("ご"        "go")
    ("さ"        "sa")
    ("ざ"        "za")
    ("し"        "shi"                               "si")
    ("しゃ"      "sha" "sya")
    ;; hu の例外処理: shu は sfu になってはいけない
    ("しゅ"      "shu" "syu")
    ("しぇ"      "she" "sye")
    ("しょ"      "sho" "syo")
    ("じ"        "ji" "zi")
    ("じゃ"      "ja" "jya")
    ("じゅ"      "ju" "jyu")
    ("じぇ"      "je" "jye")
    ("じょ"      "jo" "jyo")
    ("す"        "su")
    ("ず"        "zu")
    ("せ"        "se")
    ("ぜ"        "ze")
    ("そ"        "so")
    ("ぞ"        "zo")
    ("た"        "ta")
    ("だ"        "da")
    ;; normal roman                                ---AZIK---
    ("ち"        "chi" "tyi"                         "ti")
    ("ちゃ"      "cha" "tya")
    ;; hu の例外処理: chu は cfu になってはいけない
    ("ちゅ"      "chu" "tyu")
    ("ちぇ"      "che" "tye")
    ("ちょ"      "cho" "tyo")
    ("ぢ"        "di")
    ("ぢゃ"      "dya")
    ("ぢゅ"      "dyu")
    ("ぢぇ"      "dye")
    ("ぢょ"      "dyo")
    ("っ"        "tt" "xtu" "xtsu"                    "@")
    ;; normal roman                                ---AZIK---
    ("つ"        "tsu"                                "tu")
    ("づ"        "du")
    ("て"        "te")
    ("で"        "de")
    ("と"        "to")
    ("ど"        "do")
    ("な"        "na")
    ("に"        "ni")
    ("にゃ"      "nya")
    ("にゅ"      "nyu")
    ("にょ"      "nyo")
    ("ぬ"        "nu")
    ("ね"        "ne")
    ("の"        "no")
    ("は"        "ha")
    ("ば"        "ba")
    ("ぱ"        "pa")
    ("ひ"        "hi")
    ("ひゃ"      "hya")
    ("ひゅ"      "hyu")
    ("ひょ"      "hyo")
    ("び"        "bi")
    ("びゃ"      "bya")
    ("びゅ"      "byu")
    ("びょ"      "byo")
    ("ぴ"        "pi")
    ("ぴゃ"      "pya")
    ("ぴゅ"      "pyu")
    ("ぴょ"      "pyo")
    ("ふ"        "fu" "hu")
    ("ふぁ"      "fa")
    ("ふぃ"      "fi")
    ("ふぇ"      "fe")
    ("ふぉ"      "fo")
    ("ぶ"        "bu")
    ("ぷ"        "pu")
    ("へ"        "he")
    ("べ"        "be")
    ("ぺ"        "pe")
    ("ほ"        "ho")
    ("ぼ"        "bo")
    ("ぽ"        "po")
    ("ま"        "ma")
    ("み"        "mi")
    ("みゃ"      "mya")
    ("みゅ"      "myu")
    ("みょ"      "myo")
    ("む"        "mu")
    ("め"        "me")
    ("も"        "mo")
    ("ゃ"        "xya")
    ("や"        "ya")
    ("ゅ"        "xyu")
    ("ゆ"        "yu")
    ("ょ"        "xyo")
    ("よ"        "yo")
    ("ら"        "ra")
    ("り"        "ri")
    ("りゃ"      "rya")
    ("りゅ"      "ryu")
    ("りょ"      "ryo")
    ("る"        "ru")
    ("れ"        "re")
    ("ろ"        "ro")
    ("ゎ"        "xwa")
    ("わ"        "wa")
    ("ゐ"        "wi")
    ("ゑ"        "we")
    ("を"        "wo")
    ;; normal roman                                ---AZIK---
    ("ん"        "nn" "n"                             "q")
    ("でぃ"      "dyi" "dhi")
    ("ー"        "-" "^"                              ":")

    ;; Ruby romkanからの不足分追加
    ("てぃ"     "thi")
    ;; Sekkaの辞書に入っている特別なキーワード ">あん" など
    (">"        ">")

    ;; 撥音から始まるキーワード
    ("っう゛"    "vvu")
    ("っう゛ぁ"  "vva")
    ("っう゛ぃ"  "vvi")
    ("っう゛ぇ"  "vve")
    ("っう゛ぉ"  "vvo")
    ("っか"      "kka")
    ("っが"      "gga")
    ("っき"      "kki")
    ("っきゃ"    "kkya")
    ("っきゅ"    "kkyu")
    ("っきょ"    "kkyo")
    ("っぎ"      "ggi")
    ("っぎゃ"    "ggya")
    ("っぎゅ"    "ggyu")
    ("っぎょ"    "ggyo")
    ("っく"      "kku")
    ("っぐ"      "ggu")
    ("っけ"      "kke")
    ("っげ"      "gge")
    ("っこ"      "kko")
    ("っご"      "ggo")
    ("っさ"      "ssa")
    ("っざ"      "zza")
    ("っし"      "sshi")
    ("っしゃ"    "ssha" "ssya")
    ("っしゅ"    "sshu" "ssyu")
    ("っしぇ"    "sshe" "ssye")
    ("っしょ"    "ssho" "ssyo")
    ("っじ"      "jji")
    ("っじゃ"    "jja")
    ("っじゅ"    "jju")
    ("っじぇ"    "jje")
    ("っじょ"    "jjo")
    ("っす"      "ssu")
    ("っず"      "zzu")
    ("っせ"      "sse")
    ("っぜ"      "zze")
    ("っそ"      "sso")
    ("っぞ"      "zzo")
    ("った"      "tta")
    ("っだ"      "dda")
    ("っち"      "cchi" "ttyi")
    ("っちゃ"    "ccha" "ttya")
    ("っちゅ"    "cchu" "ttyu")
    ("っちぇ"    "cche" "ttye")
    ("っちょ"    "ccho" "ttyo")
    ("っぢ"      "ddi")
    ("っぢゃ"    "ddya")
    ("っぢゅ"    "ddyu")
    ("っぢぇ"    "ddye")
    ("っぢょ"    "ddyo")
    ("っつ"      "ttsu")
    ("っづ"      "ddu")
    ("って"      "tte")
    ("っで"      "dde")
    ("っと"      "tto")
    ("っど"      "ddo")
    ("っは"      "hha")
    ("っば"      "bba")
    ("っぱ"      "ppa")
    ("っひ"      "hhi")
    ("っひゃ"    "hhya")
    ("っひゅ"    "hhyu")
    ("っひょ"    "hhyo")
    ("っび"      "bbi")
    ("っびゃ"    "bbya")
    ("っびゅ"    "bbyu")
    ("っびょ"    "bbyo")
    ("っぴ"      "ppi")
    ("っぴゃ"    "ppya")
    ("っぴゅ"    "ppyu")
    ("っぴょ"    "ppyo")
    ("っふ"      "ffu" "hhu")
    ("っふぁ"    "ffa")
    ("っふぃ"    "ffi")
    ("っふぇ"    "ffe")
    ("っふぉ"    "ffo")
    ("っぶ"      "bbu")
    ("っぷ"      "ppu")
    ("っへ"      "hhe")
    ("っべ"      "bbe")
    ("っぺ"      "ppe")
    ("っほ"      "hho")
    ("っぼ"      "bbo")
    ("っぽ"      "ppo")
    ("っや"      "yya")
    ("っゆ"      "yyu")
    ("っよ"      "yyo")
    ("っら"      "rra")
    ("っり"      "rri")
    ("っりゃ"    "rrya")
    ("っりゅ"    "rryu")
    ("っりょ"    "rryo")
    ("っる"      "rru")
    ("っれ"      "rre")
    ("っろ"      "rro")
    ))

;; 子音が2音入ったテーブル
(define sekka-kana->roman-alist-long
  `(
    ;; ---以下AZIK---
    ;; ------ AZIK 撥音拡張
    ("かん"       "kz" "kn")
    ("きん"       "kk")
    ("くん"       "kj")
    ("けん"       "kd")
    ("こん"       "kl")
    ("さん"       "sz" "sn")
    ("しん"       "sk")
    ("すん"       "sj")
    ("せん"       "sd")
    ("そん"       "sl")
    ("たん"       "tz" "tn")
    ("ちん"       "tk")
    ("つん"       "tj")
    ("てん"       "td")
    ("とん"       "tl")
    ("なん"       "nz")
    ;;("さん"     "nn")  "ん"になる
    ("にん"       "nk")
    ("ぬん"       "nj")
    ("ねん"       "nd")
    ("のん"       "nl")
    ("はん"       "hz" "hn")
    ("ひん"       "hk")
    ("ふん"       "hj")
    ("へん"       "hd")
    ("ほん"       "hl")
    ("ふぁん"     "fz" "fn")
    ("ふぃん"     "fk")
    ("ふん"       "fj")
    ("ふぇん"     "fd")
    ("ふぉん"     "fl")
    ("まん"       "mz")
    ;;("まん"     "mn") "もの"になる
    ("みん"       "mk")
    ("むん"       "mj")
    ("めん"       "md")
    ("もん"       "ml")
    ("やん"       "yz" "yn")
    ("ゆん"       "yj")
    ("よん"       "yl")
    ("らん"       "rz")
    ("らん"       "rn")
    ("りん"       "rk")
    ("るん"       "rj")
    ("れん"       "rd")
    ("ろん"       "rl" "wz")
    ("わん"       "wn")
    ("うぃん"     "wk")
    ("うぇん"     "wd")
    ("うぉん"     "wl")
        
    ;; ------ AZIK 二重母音拡張
    ("かい"      "kq")
    ("くう"      "kh")
    ("けい"      "kw")
    ("こう"      "kp")
    ("さい"      "sq")
    ("すう"      "sh")
    ("せい"      "sw")
    ("そう"      "sp")
    ("たい"      "tq")
    ("つう"      "th")
    ("てい"      "tw")
    ("とう"      "tp")
    ("ない"      "nq")
    ("ぬう"      "nh")
    ("ねい"      "nw")
    ("のう"      "np")
    ("はい"      "hq")
    ("ふう"      "hh")
    ("へい"      "hw")
    ("ほう"      "hp")
    ("ふぁい"    "fq")
    ("ふう"      "fh")
    ("ふぇい"    "fw")
    ("ふぉー"    "fp")
    ("まい"      "mq")
    ("むう"      "mh")
    ("めい"      "mw")
    ("もう"      "mp")
    ("やい"      "yq")
    ("ゆう"      "yh")
    ("よう"      "yp")
    ("らい"      "rq")
    ("るう"      "rh")
    ("れい"      "rw")
    ("ろう"      "rp")
    ("わい"      "wq")
    ("うぉー"    "wp")
    
    ;; ------ AZIK 特殊拡張
    ("こと"       "kt")
    ("わた"       "wt")
    ("かも"       "km")
    ("する"       "sr")
    ("られ"       "rr")
    ("ねば"       "nb")
    ("にち"       "nt")

    ("した"       "st")
    ("もの"       "mn")
    ("ため"       "tm")
    ("たら"       "tr")
    ("ざる"       "zr")
    ("びと"       "bt")
    ("だち"       "dt")
    
    ("たち"       "tt")
    ("ます"       "ms")
    ("でも"       "dm")
    ("なる"       "nr")
    ("また"       "mt")
    ("がら"       "gr")
    ("われ"       "wr")

    ("ひと"       "ht")
    ("です"       "ds")
    ("から"       "kr")
    ("よる"       "yr")
    ("たび"       "tb")
    ("ごと"       "gt")
    ))


;; ハッシュテーブル  平仮名   =>ローマ字
(define sekka-kana->roman-hash-short
  (alist->hash-table sekka-kana->roman-alist-short))
(define sekka-kana->roman-hash-long
  (alist->hash-table (append
                      sekka-kana->roman-alist-short
                      sekka-kana->roman-alist-long)))

;; ハッシュテーブル  ローマ字 =>平仮名
(define (sekka-alist-swap alist)
  (append-map
   (lambda (x)
     (let ((hira   (car x))
           (romans (cdr x)))
       (map (lambda (r) (list r hira)) romans)))
   alist))
(define sekka-roman->kana-hash-short
  (alist->hash-table (sekka-alist-swap sekka-kana->roman-alist-short)))
(define sekka-roman->kana-hash-long
  (alist->hash-table (sekka-alist-swap
                      (append
                       sekka-kana->roman-alist-short
                       sekka-kana->roman-alist-long))))

;; 平仮名->カタカナ 変換
(define (gen-hiragana->katakana str)
  (str.tr "あ-んぁぃぅぇぉゃゅょっー" "ア-ンァィゥェォャュョッー"))

;; カタカナ->平仮名 変換
(define (gen-katakana->hiragana str)
  (str.tr "ア-ンァィゥェォャュョッー" "あ-んぁぃぅぇぉゃゅょっー"))

;; カタカナの文字列かどうかを評価する
(define (is-katakana str)
  (if (rxmatch #/^[ア-ンァィゥェォャュョッー]+$/ str) #t #f))

;; 平仮名の文字列かどうかを評価する
(define (is-hiragana str)
  (if (rxmatch #/^[あ-んぁぃぅぇぉゃゅょっー]+$/ str) #t #f))

;; 送り仮名付き平仮名文字列(例:"おこなu") かどうかを評価する
(define (is-hiragana-and-okuri str)
  (if (rxmatch #/^[あ-んぁぃぅぇぉゃゅょっー]+[a-z]$/ str) #t #f))

;; 送り仮名付き漢字文字列(例:"行う") の送り仮名部分を削除する
(define (drop-okuri str)
  (if-let1 m (rxmatch #/^([^あ-んぁぃぅぇぉゃゅょっー]+)(.+)$/ str)
    (rxmatch-substring m 1)
    str))

(define (gen-hiragana->roman-pattens-with-hash h hiragana)
  (let1 lst '()
    (let loop ((str hiragana))
      (let ((str1 (str.slice 0 1))
            (str2 (str.slice 0 2))
            (str3 (str.slice 0 3)))
        (cond
         ((eq? 0 (str.size))
          #f)
         ((hash-table-exist? h str3)
          (set! lst (cons (hash-table-get h str3) lst))
          (loop (str.slice (str3.size) (str.size))))
         ((hash-table-exist? h str2)
          (set! lst (cons (hash-table-get h str2) lst))
          (loop (str.slice (str2.size) (str.size))))
         ((hash-table-exist? h str1)
          (set! lst (cons (hash-table-get h str1) lst))
          (loop (str.slice (str1.size) (str.size)))))))
    (reverse lst)))


(define (gen-hiragana->roman-pattens hiragana)
  (list
   (gen-hiragana->roman-pattens-with-hash  sekka-kana->roman-hash-short  hiragana)
   (gen-hiragana->roman-pattens-with-hash  sekka-kana->roman-hash-long   hiragana)))


;; if failed, return #f
(define (gen-roman->hiragana-with-hash h roman-str)
  (let ((lst '())
        (err #f))
    (let loop ((str roman-str))
      (let ((str1 (str.slice 0 1))
            (str2 (str.slice 0 2))
            (str3 (str.slice 0 3))
            (str4 (str.slice 0 4)))
        (cond
         ((eq? 0 (str.size))
          #f)
         ((hash-table-exist? h str4)
          (set! lst (cons (hash-table-get h str4) lst))
          (loop (str.slice (str4.size) (str.size))))
         ((hash-table-exist? h str3)
          (set! lst (cons (hash-table-get h str3) lst))
          (loop (str.slice (str3.size) (str.size))))
         ((hash-table-exist? h str2)
          (set! lst (cons (hash-table-get h str2) lst))
          (loop (str.slice (str2.size) (str.size))))
         ((hash-table-exist? h str1)
          (set! lst (cons (hash-table-get h str1) lst))
          (loop (str.slice (str1.size) (str.size))))
         (else
          (set! err #t)))))
    (if err
        #f
        (string-join
         (map
          (lambda (x) (car x))
          (reverse lst))))))


;; if failed, return '()
(define (gen-roman->hiragana roman-str)
  (filter
   (lambda (x) x)
   (list
    (gen-roman->hiragana-with-hash  sekka-roman->kana-hash-short  roman-str)
    (gen-roman->hiragana-with-hash  sekka-roman->kana-hash-long   roman-str))))

;; if failed, return '()
(define (gen-roman->katakana roman-str)
  (filter-map
   (lambda (x)
     (gen-hiragana->katakana x))
   (gen-roman->hiragana roman-str)))

;; This function port from Gauche-0.9's util.combinations.
(define (cartesian-product lol)
  (if (null? lol)
      (list '())
      (let ((l (car lol))
            (rest (cartesian-product (cdr lol))))
        (append-map
         (lambda (x)
           (map (lambda (sub-prod) (cons x sub-prod)) rest))
         l))))


(define (patterns->roman-list patterns)
  (delete-duplicates
   (append-map
    (lambda (_pattern)
      (map
       (lambda (x)
         (string-join x))
       (cartesian-product _pattern)))
    patterns)))


(define (gen-hiragana->roman-list hiragana)
  (patterns->roman-list 
   (gen-hiragana->roman-pattens hiragana)))
